{
  "address": "0x0273a5B8228ed3eB186DA91fc8c3d6F8f784eDd3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAlgosAvailable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__IsOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__Open",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionState",
          "type": "uint256"
        }
      ],
      "name": "Dutch_Auction__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidderID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidvalue",
          "type": "uint256"
        }
      ],
      "name": "addBidderEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ERC20Address",
          "type": "address"
        }
      ],
      "name": "startAuctionEvent",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "addBidder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "biddersList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidderID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bidValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAlgosPurchased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refundEth",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "retrieveBidderAlgos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "retrieveBidderBidValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveContractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveCurrentPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "retrieveRefund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalAlgos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalBidder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCurrentPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6bb74d8923d206dd9a8857cb4f0f0df12c88b7e8afd78dda306bd7dd1d64045f",
  "receipt": {
    "to": null,
    "from": "0x6d3c50560B8ff74dc9Dca4d3172971B651568ee2",
    "contractAddress": "0x0273a5B8228ed3eB186DA91fc8c3d6F8f784eDd3",
    "transactionIndex": 0,
    "gasUsed": "2682994",
    "logsBloom": "0x
    "blockHash": "0xab7b1eca88acaaa0635dfe6dfbc5251a36e3c5df0d580d02bfce21a7498ac01e",
    "transactionHash": "0x6bb74d8923d206dd9a8857cb4f0f0df12c88b7e8afd78dda306bd7dd1d64045f",
    "logs": [],
    "blockNumber": 4579366,
    "cumulativeGasUsed": "2682994",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    50,
    200,
    30
  ],
  "numDeployments": 5,
  "solcInputHash": "f3febb65f69c56f7c2e43fc47a9dd143",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAlgosAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Dutch_Auction__IsOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dutch_Auction__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dutch_Auction__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dutch_Auction__Open\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionState\",\"type\":\"uint256\"}],\"name\":\"Dutch_Auction__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidvalue\",\"type\":\"uint256\"}],\"name\":\"addBidderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20Address\",\"type\":\"address\"}],\"name\":\"startAuctionEvent\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"addBidder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"biddersList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidderID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAlgosPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundEth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"retrieveBidderAlgos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"retrieveBidderBidValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveCurrentPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"retrieveRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalAlgos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalBidder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCurrentPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"startAuctionEvent(uint256,address)\":{\"notice\":\"public functions \"}},\"kind\":\"user\",\"methods\":{\"retrieveTotalAlgos()\":{\"notice\":\"View and Pure Function \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dutch_Auction.sol\":\"Dutch_Auction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"contracts/Dutch_Auction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\n// Using our own ERC20Token\\r\\nimport \\\"./ERC20Token.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Dutch_Auction__NotOwner();\\r\\nerror Dutch_Auction__IsOwner();\\r\\nerror Dutch_Auction__NotOpen();\\r\\nerror Dutch_Auction__Open();\\r\\nerror Dutch_Auction__UpKeepNotNeeded(uint256 auctionState);\\r\\n\\r\\ncontract Dutch_Auction is AutomationCompatibleInterface {\\r\\n    int256 private currentPrice; //in wei\\r\\n    uint256 private totalNumBidders = 0;\\r\\n    uint256 private immutable startPrice; //in wei\\r\\n    uint256 private immutable reservePrice;\\r\\n    address private immutable i_owner;\\r\\n    uint256 private immutable totalAlgosAvailable;\\r\\n    uint256 private startTime;\\r\\n    uint256 private constant AUCTION_TIME = 1200; //in seconds\\r\\n    uint256 private currentUnsoldAlgos;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    ERC20Token private DAToken; //importing Token\\r\\n    address private ERC20ContractAddress;\\r\\n    address[] biddersAddress;\\r\\n\\r\\n    mapping(address => Bidder) public biddersList; //to be made private later <for debugging purposes>\\r\\n\\r\\n    struct Bidder {\\r\\n        uint256 bidderID;\\r\\n        address walletAddress;\\r\\n        uint256 bidValue; //the value they paid to the contract to purchase the algo\\r\\n        uint256 totalAlgosPurchased;\\r\\n        uint256 refundEth;\\r\\n        bool isExist;\\r\\n    }\\r\\n\\r\\n    // Variable to indicate auction's state --> type declaration\\r\\n    enum AuctionState {\\r\\n        OPEN,\\r\\n        CLOSING\\r\\n    } // uint256 0: OPEN, 1: CLOSED\\r\\n\\r\\n    AuctionState private s_auctionState;\\r\\n\\r\\n    /*Constructor*/\\r\\n    constructor(\\r\\n        uint256 _reservePrice,\\r\\n        uint256 _startPrice,\\r\\n        uint256 _totalAlgosAvailable,\\r\\n        uint256 _interval\\r\\n    ) {\\r\\n        require(\\r\\n            _reservePrice < _startPrice,\\r\\n            \\\"reserve price is higher than current price\\\"\\r\\n        );\\r\\n        i_owner = msg.sender;\\r\\n        reservePrice = _reservePrice;\\r\\n        totalAlgosAvailable = _totalAlgosAvailable;\\r\\n        currentPrice = int256(_startPrice);\\r\\n        startPrice = _startPrice;\\r\\n\\r\\n        i_interval = _interval;\\r\\n        s_auctionState = AuctionState.CLOSING;\\r\\n    }\\r\\n\\r\\n    /* modifiers */\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender != i_owner) revert Dutch_Auction__NotOwner();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    modifier notOwner() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender == i_owner) revert Dutch_Auction__IsOwner();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    modifier AuctionOpen() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (AuctionState.CLOSING == s_auctionState)\\r\\n            revert Dutch_Auction__NotOpen();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    modifier AuctionClosed() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (AuctionState.OPEN == s_auctionState) revert Dutch_Auction__Open();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /*checkData*/\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        bool isOpen = AuctionState.OPEN == s_auctionState;\\r\\n        // need to check (block.timestamp - last block timestamp) > interval\\r\\n        bool timePassed = (block.timestamp - startTime) > i_interval;\\r\\n        // if this is true, end auction and burn tokens\\r\\n        upkeepNeeded = (isOpen && timePassed); // if true, end auction\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        // want some validation such that only gets called when checkupkeep is true\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        // if ((block.timestamp - lastTimeStamp) > interval) {\\r\\n        //     lastTimeStamp = block.timestamp;\\r\\n        // }\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Dutch_Auction__UpKeepNotNeeded(uint256(s_auctionState));\\r\\n        }\\r\\n        s_auctionState = AuctionState.CLOSING;\\r\\n        // only owner can end auction\\r\\n\\r\\n        if (upkeepNeeded) {\\r\\n            // if never sell finish, burn all remaining algos\\r\\n            endAuction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /***\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * public functions\\r\\n     *\\r\\n     * */\\r\\n    event startAuctionEvent(uint256 startTime, address ERC20Address);\\r\\n    event addBidderEvent(\\r\\n        uint256 bidderID,\\r\\n        address walletAddress,\\r\\n        uint256 bidvalue\\r\\n    );\\r\\n\\r\\n    function startAuction(address _token) public onlyOwner AuctionClosed {\\r\\n        s_auctionState = AuctionState.OPEN;\\r\\n        startTime = block.timestamp; //Start time of when the contract is deployed\\r\\n        DAToken = ERC20Token(_token);\\r\\n        ERC20ContractAddress = _token;\\r\\n        emit startAuctionEvent(startTime, _token);\\r\\n    }\\r\\n\\r\\n    //Reference: https://docs.soliditylang.org/en/latest/types.html#structs\\r\\n\\r\\n    function addBidder() public payable notOwner AuctionOpen {\\r\\n        //checking all the requirements\\r\\n        require(msg.value > 0, \\\"bidValue less than 0\\\");\\r\\n        require(block.timestamp - startTime < AUCTION_TIME, \\\"time is up\\\");\\r\\n\\r\\n        // Adding or Updating the bidders currently in the contract\\r\\n        if (!biddersList[msg.sender].isExist) {\\r\\n            Bidder storage newBidder = biddersList[msg.sender];\\r\\n            newBidder.bidderID = ++totalNumBidders;\\r\\n            newBidder.walletAddress = msg.sender;\\r\\n            newBidder.bidValue = msg.value;\\r\\n            newBidder.isExist = true;\\r\\n            newBidder.totalAlgosPurchased = 0;\\r\\n            newBidder.refundEth = 0;\\r\\n            biddersAddress.push(msg.sender);\\r\\n            emit addBidderEvent(\\r\\n                newBidder.bidderID,\\r\\n                newBidder.walletAddress,\\r\\n                newBidder.bidValue\\r\\n            );\\r\\n        } else {\\r\\n            Bidder storage existingBidder = biddersList[msg.sender];\\r\\n            existingBidder.bidValue += msg.value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*Internal Functions */\\r\\n    //TODO: make this internal later\\r\\n    function updateCurrentPrice() public onlyOwner {\\r\\n        currentPrice =\\r\\n            int256(startPrice) -\\r\\n            int256((block.timestamp - startTime) / 30) *\\r\\n            10;\\r\\n\\r\\n        if (currentPrice <= 0 || currentPrice <= int256(reservePrice)) {\\r\\n            currentPrice = int256(reservePrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    triggered when either algos runs out or time runs out \\r\\n    */\\r\\n\\r\\n    function sendTokens() public onlyOwner AuctionClosed {\\r\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\r\\n            if (biddersList[biddersAddress[i]].totalAlgosPurchased > 0) {\\r\\n                DAToken.approve(\\r\\n                    biddersAddress[i],\\r\\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\\r\\n                        10 ** 18\\r\\n                );\\r\\n                DAToken.transferFrom(\\r\\n                    i_owner,\\r\\n                    biddersAddress[i],\\r\\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\\r\\n                        10 ** 18\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculate() public onlyOwner AuctionClosed {\\r\\n        updateCurrentPrice();\\r\\n        uint256 currentAlgos = totalAlgosAvailable;\\r\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\r\\n            if (\\r\\n                currentAlgos >\\r\\n                biddersList[biddersAddress[i]].bidValue / uint256(currentPrice)\\r\\n            ) {\\r\\n                biddersList[biddersAddress[i]].totalAlgosPurchased =\\r\\n                    biddersList[biddersAddress[i]].bidValue /\\r\\n                    uint256(currentPrice);\\r\\n                currentAlgos -=\\r\\n                    biddersList[biddersAddress[i]].bidValue /\\r\\n                    uint256(currentPrice);\\r\\n                //or we ask them to pay in the end\\r\\n            } else if (\\r\\n                currentAlgos > 0 &&\\r\\n                currentAlgos <=\\r\\n                biddersList[biddersAddress[i]].bidValue / uint256(currentPrice)\\r\\n            ) {\\r\\n                biddersList[biddersAddress[i]]\\r\\n                    .totalAlgosPurchased = currentAlgos;\\r\\n                currentAlgos = 0;\\r\\n                biddersList[biddersAddress[i]].refundEth =\\r\\n                    biddersList[biddersAddress[i]].bidValue -\\r\\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\\r\\n                    uint256(currentPrice);\\r\\n                //refundETH\\r\\n                (bool callSuccess, ) = payable(\\r\\n                    biddersList[biddersAddress[i]].walletAddress\\r\\n                ).call{value: biddersList[biddersAddress[i]].refundEth}(\\\"\\\");\\r\\n                require(callSuccess, \\\"Failed to send ether\\\");\\r\\n            } else if (\\r\\n                currentAlgos <= 0 &&\\r\\n                biddersList[biddersAddress[i]].totalAlgosPurchased == 0\\r\\n            ) {\\r\\n                //refund for the rest\\r\\n                biddersList[biddersAddress[i]].refundEth = biddersList[\\r\\n                    biddersAddress[i]\\r\\n                ].bidValue;\\r\\n                (bool callSuccess, ) = payable(\\r\\n                    biddersList[biddersAddress[i]].walletAddress\\r\\n                ).call{value: biddersList[biddersAddress[i]].refundEth}(\\\"\\\");\\r\\n                require(callSuccess, \\\"Failed to send ether\\\");\\r\\n            }\\r\\n        }\\r\\n        if (currentAlgos > 0) {\\r\\n            currentUnsoldAlgos = currentAlgos;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function endAuction() public onlyOwner {\\r\\n        s_auctionState = AuctionState.CLOSING;\\r\\n        calculate();\\r\\n        sendTokens();\\r\\n        if (currentUnsoldAlgos > 0) {\\r\\n            DAToken.burn(i_owner, currentUnsoldAlgos);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        addBidder();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        addBidder();\\r\\n    }\\r\\n\\r\\n    /**View and Pure Function */\\r\\n\\r\\n    function retrieveTotalAlgos() public view onlyOwner returns (uint256) {\\r\\n        return totalAlgosAvailable;\\r\\n    }\\r\\n\\r\\n    function retrieveReservePrice() public view onlyOwner returns (uint256) {\\r\\n        return reservePrice;\\r\\n    }\\r\\n\\r\\n    function retrieveCurrentPrice() public view onlyOwner returns (int256) {\\r\\n        return currentPrice;\\r\\n    }\\r\\n\\r\\n    function retrieveTotalBidder() public view onlyOwner returns (uint256) {\\r\\n        return totalNumBidders;\\r\\n    }\\r\\n\\r\\n    function retrieveContractOwner() public view onlyOwner returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function retrieveContractBalance() public view onlyOwner returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function retrieveBidderBidValue(\\r\\n        address bidder\\r\\n    ) public view onlyOwner returns (uint256) {\\r\\n        return biddersList[bidder].bidValue;\\r\\n    }\\r\\n\\r\\n    function retrieveBidderAlgos(\\r\\n        address bidder\\r\\n    ) public view onlyOwner returns (uint256) {\\r\\n        return biddersList[bidder].totalAlgosPurchased;\\r\\n    }\\r\\n\\r\\n    function retrieveRefund(\\r\\n        address bidder\\r\\n    ) public view onlyOwner returns (uint256) {\\r\\n        return biddersList[bidder].refundEth;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb94167b09282320f76dd8506b87f2e3c6c73d536cb97367f71c7a4cb894b6d65\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract ERC20Token is Context, ERC20, Ownable {\\r\\n    constructor(\\r\\n        uint256 initialSupply,\\r\\n        address contractAddress\\r\\n    ) Ownable(msg.sender) ERC20(\\\"ERC20Token\\\", \\\"ET\\\") {\\r\\n        _mint(msg.sender, initialSupply * (10 ** 18));\\r\\n        approve(contractAddress, initialSupply * (10 ** 18));\\r\\n    }\\r\\n\\r\\n    function burn(address owner, uint256 amount) public {\\r\\n        _burn(owner, amount * 10 ** 18);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd95646d1c6a330001d57e6036d304fc197fc5618019eb34ce270e5e504570098\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405260006001553480156200001757600080fd5b506040516200324b3803806200324b83398181016040528101906200003d919062000156565b82841062000082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000079906200024f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360a081815250508160e081815250508260008190555082608081815250508061010081815250506001600860006101000a81548160ff0219169083600181111562000107576200010662000271565b5b021790555050505050620002a0565b600080fd5b6000819050919050565b62000130816200011b565b81146200013c57600080fd5b50565b600081519050620001508162000125565b92915050565b6000806000806080858703121562000173576200017262000116565b5b600062000183878288016200013f565b945050602062000196878288016200013f565b9350506040620001a9878288016200013f565b9250506060620001bc878288016200013f565b91505092959194509250565b600082825260208201905092915050565b7f7265736572766520707269636520697320686967686572207468616e2063757260008201527f72656e7420707269636500000000000000000000000000000000000000000000602082015250565b600062000237602a83620001c8565b91506200024482620001d9565b604082019050919050565b600060208201905081810360008301526200026a8162000228565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051612eda620003716000396000610cf20152600081816112b60152611de401526000818161041901528181610803015281816108920152818161093f01528181610a0e01528181610da201528181610e7301528181610efe0152818161103e015281816110c3015281816110eb015281816111ba01528181611d5f01528181611e0c01528181611e99015281816121d401528181612341015261244a01526000818161091701528181610fe6015261101201526000610fa90152612eda6000f3fe60806040526004361061010d5760003560e01c80637ded653f11610095578063ca77ab6511610064578063ca77ab651461037c578063df38530614610393578063e4655bca146103be578063e47112bd146103e9578063fe67a54b146104005761011c565b80637ded653f146102d2578063aa9d9bd6146102fd578063ac5ece6d14610314578063c6dda9451461033f5761011c565b80634075fa0f116100dc5780634075fa0f146101c35780634585e33b146101ec5780636e04ff0d146102155780636e3bc76b146102535780637494c875146102955761011c565b80630b3248081461012657806314df33ac146101515780631f8cdb041461017c5780633bc7682c146101865761011c565b3661011c5761011a610417565b005b610124610417565b005b34801561013257600080fd5b5061013b6107ff565b60405161014891906124d7565b60405180910390f35b34801561015d57600080fd5b5061016661088e565b604051610173919061250b565b60405180910390f35b610184610417565b005b34801561019257600080fd5b506101ad60048036038101906101a89190612598565b61093b565b6040516101ba919061250b565b60405180910390f35b3480156101cf57600080fd5b506101ea60048036038101906101e59190612598565b610a0c565b005b3480156101f857600080fd5b50610213600480360381019061020e919061262a565b610bf0565b005b34801561022157600080fd5b5061023c600480360381019061023791906127b8565b610caf565b60405161024a92919061289b565b60405180910390f35b34801561025f57600080fd5b5061027a60048036038101906102759190612598565b610d35565b60405161028c969594939291906128da565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190612598565b610d9e565b6040516102c9919061250b565b60405180910390f35b3480156102de57600080fd5b506102e7610e6f565b6040516102f4919061250b565b60405180910390f35b34801561030957600080fd5b50610312610efc565b005b34801561032057600080fd5b5061032961103a565b604051610336919061293b565b60405180910390f35b34801561034b57600080fd5b5061036660048036038101906103619190612598565b6110e7565b604051610373919061250b565b60405180910390f35b34801561038857600080fd5b506103916111b8565b005b34801561039f57600080fd5b506103a8611d5b565b6040516103b5919061250b565b60405180910390f35b3480156103ca57600080fd5b506103d3611e08565b6040516103e0919061250b565b60405180910390f35b3480156103f557600080fd5b506103fe611e97565b005b34801561040c57600080fd5b5061041561233f565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361049c576040517fc3fdc7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860009054906101000a900460ff1660018111156104be576104bd612956565b5b6001808111156104d1576104d0612956565b5b03610508576040517f5de7a96600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000341161054b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610542906129e2565b60405180910390fd5b6104b06002544261055c9190612a31565b1061059c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059390612ab1565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1661079d576000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060016000815461064290612ad1565b9190508190558160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034816002018190555060018160050160006101000a81548160ff02191690831515021790555060008160030181905550600081600401819055506006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6559452b5cf88e12990371c9441273d2dbb464fb7dd9cc4030551b86df924b6281600001548260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836002015460405161078f93929190612b19565b60405180910390a1506107fd565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050348160020160008282546107f49190612b50565b92505081905550505b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610886576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610915576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109c2576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a91576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860009054906101000a900460ff166001811115610ab357610ab2612956565b5b60006001811115610ac757610ac6612956565b5b03610afe576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600860006101000a81548160ff02191690836001811115610b2457610b23612956565b5b02179055504260028190555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff22abd93b9682674a6b5ebbb244653f7cc25bfab21953abff8d9e8627883557660025482604051610be5929190612b84565b60405180910390a150565b6000610c0a60405180602001604052806000815250610caf565b50905080610c7057600860009054906101000a900460ff166001811115610c3457610c33612956565b5b6040517f8af44fe0000000000000000000000000000000000000000000000000000000008152600401610c67919061250b565b60405180910390fd5b6001600860006101000a81548160ff02191690836001811115610c9657610c95612956565b5b02179055508015610caa57610ca961233f565b5b505050565b600060606000600860009054906101000a900460ff166001811115610cd757610cd6612956565b5b60006001811115610ceb57610cea612956565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610d1f9190612a31565b119050818015610d2c5750805b93505050915091565b60076020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e25576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ef6576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f81576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a601e60025442610f939190612a31565b610f9d9190612bdc565b610fa79190612c0d565b7f0000000000000000000000000000000000000000000000000000000000000000610fd29190612c85565b6000819055506000805413158061100b57507f000000000000000000000000000000000000000000000000000000000000000060005413155b15611038577f00000000000000000000000000000000000000000000000000000000000000006000819055505b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110c1576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461116e576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461123d576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860009054906101000a900460ff16600181111561125f5761125e612956565b5b6000600181111561127357611272612956565b5b036112aa576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112b2610efc565b60007f0000000000000000000000000000000000000000000000000000000000000000905060005b600680549050811015611d4657600054600760006006848154811061130257611301612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546113759190612bdc565b82111561152e57600054600760006006848154811061139757611396612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461140a9190612bdc565b600760006006848154811061142257611421612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060005460076000600684815481106114a9576114a8612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461151c9190612bdc565b826115279190612a31565b9150611d33565b6000821180156115cb5750600054600760006006848154811061155457611553612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546115c79190612bdc565b8211155b156119c8578160076000600684815481106115e9576115e8612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060009150600054600760006006848154811061167457611673612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546116e79190612cf7565b60076000600684815481106116ff576116fe612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546117729190612a31565b600760006006848154811061178a57611789612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550600060076000600684815481106118105761180f612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660076000600685815481106118c7576118c6612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015460405161193c90612d6a565b60006040518083038185875af1925050503d8060008114611979576040519150601f19603f3d011682016040523d82523d6000602084013e61197e565b606091505b50509050806119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b990612dcb565b60405180910390fd5b50611d32565b60008211158015611a595750600060076000600684815481106119ee576119ed612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154145b15611d31576007600060068381548110611a7657611a75612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546007600060068481548110611af757611af6612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555060006007600060068481548110611b7d57611b7c612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166007600060068581548110611c3457611c33612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154604051611ca990612d6a565b60006040518083038185875af1925050503d8060008114611ce6576040519150601f19603f3d011682016040523d82523d6000602084013e611ceb565b606091505b5050905080611d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2690612dcb565b60405180910390fd5b505b5b5b8080611d3e90612ad1565b9150506112da565b506000811115611d5857806003819055505b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611de2576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e8f576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f1c576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860009054906101000a900460ff166001811115611f3e57611f3d612956565b5b60006001811115611f5257611f51612956565b5b03611f89576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068054905081101561233c5760006007600060068481548110611fb357611fb2612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154111561232957600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b36006838154811061207457612073612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a764000060076000600687815481106120c0576120bf612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546121339190612cf7565b6040518363ffffffff1660e01b8152600401612150929190612deb565b6020604051808303816000875af115801561216f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121939190612e40565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000006006848154811061220757612206612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a7640000600760006006888154811061225357612252612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546122c69190612cf7565b6040518463ffffffff1660e01b81526004016122e493929190612e6d565b6020604051808303816000875af1158015612303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123279190612e40565b505b808061233490612ad1565b915050611f8c565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123c4576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600860006101000a81548160ff021916908360018111156123ea576123e9612956565b5b02179055506123f76111b8565b6123ff611e97565b600060035411156124bc57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac7f00000000000000000000000000000000000000000000000000000000000000006003546040518363ffffffff1660e01b8152600401612489929190612deb565b600060405180830381600087803b1580156124a357600080fd5b505af11580156124b7573d6000803e3d6000fd5b505050505b565b6000819050919050565b6124d1816124be565b82525050565b60006020820190506124ec60008301846124c8565b92915050565b6000819050919050565b612505816124f2565b82525050565b600060208201905061252060008301846124fc565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125658261253a565b9050919050565b6125758161255a565b811461258057600080fd5b50565b6000813590506125928161256c565b92915050565b6000602082840312156125ae576125ad612530565b5b60006125bc84828501612583565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125ea576125e96125c5565b5b8235905067ffffffffffffffff811115612607576126066125ca565b5b602083019150836001820283011115612623576126226125cf565b5b9250929050565b6000806020838503121561264157612640612530565b5b600083013567ffffffffffffffff81111561265f5761265e612535565b5b61266b858286016125d4565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126c58261267c565b810181811067ffffffffffffffff821117156126e4576126e361268d565b5b80604052505050565b60006126f7612526565b905061270382826126bc565b919050565b600067ffffffffffffffff8211156127235761272261268d565b5b61272c8261267c565b9050602081019050919050565b82818337600083830152505050565b600061275b61275684612708565b6126ed565b90508281526020810184848401111561277757612776612677565b5b612782848285612739565b509392505050565b600082601f83011261279f5761279e6125c5565b5b81356127af848260208601612748565b91505092915050565b6000602082840312156127ce576127cd612530565b5b600082013567ffffffffffffffff8111156127ec576127eb612535565b5b6127f88482850161278a565b91505092915050565b60008115159050919050565b61281681612801565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561285657808201518184015260208101905061283b565b60008484015250505050565b600061286d8261281c565b6128778185612827565b9350612887818560208601612838565b6128908161267c565b840191505092915050565b60006040820190506128b0600083018561280d565b81810360208301526128c28184612862565b90509392505050565b6128d48161255a565b82525050565b600060c0820190506128ef60008301896124fc565b6128fc60208301886128cb565b61290960408301876124fc565b61291660608301866124fc565b61292360808301856124fc565b61293060a083018461280d565b979650505050505050565b600060208201905061295060008301846128cb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f62696456616c7565206c657373207468616e2030000000000000000000000000600082015250565b60006129cc601483612985565b91506129d782612996565b602082019050919050565b600060208201905081810360008301526129fb816129bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a3c826124f2565b9150612a47836124f2565b9250828203905081811115612a5f57612a5e612a02565b5b92915050565b7f74696d6520697320757000000000000000000000000000000000000000000000600082015250565b6000612a9b600a83612985565b9150612aa682612a65565b602082019050919050565b60006020820190508181036000830152612aca81612a8e565b9050919050565b6000612adc826124f2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b0e57612b0d612a02565b5b600182019050919050565b6000606082019050612b2e60008301866124fc565b612b3b60208301856128cb565b612b4860408301846124fc565b949350505050565b6000612b5b826124f2565b9150612b66836124f2565b9250828201905080821115612b7e57612b7d612a02565b5b92915050565b6000604082019050612b9960008301856124fc565b612ba660208301846128cb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612be7826124f2565b9150612bf2836124f2565b925082612c0257612c01612bad565b5b828204905092915050565b6000612c18826124be565b9150612c23836124be565b9250828202612c31816124be565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615612c6957612c68612a02565b5b8282058414831517612c7e57612c7d612a02565b5b5092915050565b6000612c90826124be565b9150612c9b836124be565b9250828203905081811260008412168282136000851215161715612cc257612cc1612a02565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612d02826124f2565b9150612d0d836124f2565b9250828202612d1b816124f2565b91508282048414831517612d3257612d31612a02565b5b5092915050565b600081905092915050565b50565b6000612d54600083612d39565b9150612d5f82612d44565b600082019050919050565b6000612d7582612d47565b9150819050919050565b7f4661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000612db5601483612985565b9150612dc082612d7f565b602082019050919050565b60006020820190508181036000830152612de481612da8565b9050919050565b6000604082019050612e0060008301856128cb565b612e0d60208301846124fc565b9392505050565b612e1d81612801565b8114612e2857600080fd5b50565b600081519050612e3a81612e14565b92915050565b600060208284031215612e5657612e55612530565b5b6000612e6484828501612e2b565b91505092915050565b6000606082019050612e8260008301866128cb565b612e8f60208301856128cb565b612e9c60408301846124fc565b94935050505056fea264697066735822122000ed3e4964c20f98db82ed6bb93f4ce62fc3f51e16c40493844b6468d87a99fd64736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c80637ded653f11610095578063ca77ab6511610064578063ca77ab651461037c578063df38530614610393578063e4655bca146103be578063e47112bd146103e9578063fe67a54b146104005761011c565b80637ded653f146102d2578063aa9d9bd6146102fd578063ac5ece6d14610314578063c6dda9451461033f5761011c565b80634075fa0f116100dc5780634075fa0f146101c35780634585e33b146101ec5780636e04ff0d146102155780636e3bc76b146102535780637494c875146102955761011c565b80630b3248081461012657806314df33ac146101515780631f8cdb041461017c5780633bc7682c146101865761011c565b3661011c5761011a610417565b005b610124610417565b005b34801561013257600080fd5b5061013b6107ff565b60405161014891906124d7565b60405180910390f35b34801561015d57600080fd5b5061016661088e565b604051610173919061250b565b60405180910390f35b610184610417565b005b34801561019257600080fd5b506101ad60048036038101906101a89190612598565b61093b565b6040516101ba919061250b565b60405180910390f35b3480156101cf57600080fd5b506101ea60048036038101906101e59190612598565b610a0c565b005b3480156101f857600080fd5b50610213600480360381019061020e919061262a565b610bf0565b005b34801561022157600080fd5b5061023c600480360381019061023791906127b8565b610caf565b60405161024a92919061289b565b60405180910390f35b34801561025f57600080fd5b5061027a60048036038101906102759190612598565b610d35565b60405161028c969594939291906128da565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190612598565b610d9e565b6040516102c9919061250b565b60405180910390f35b3480156102de57600080fd5b506102e7610e6f565b6040516102f4919061250b565b60405180910390f35b34801561030957600080fd5b50610312610efc565b005b34801561032057600080fd5b5061032961103a565b604051610336919061293b565b60405180910390f35b34801561034b57600080fd5b5061036660048036038101906103619190612598565b6110e7565b604051610373919061250b565b60405180910390f35b34801561038857600080fd5b506103916111b8565b005b34801561039f57600080fd5b506103a8611d5b565b6040516103b5919061250b565b60405180910390f35b3480156103ca57600080fd5b506103d3611e08565b6040516103e0919061250b565b60405180910390f35b3480156103f557600080fd5b506103fe611e97565b005b34801561040c57600080fd5b5061041561233f565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361049c576040517fc3fdc7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860009054906101000a900460ff1660018111156104be576104bd612956565b5b6001808111156104d1576104d0612956565b5b03610508576040517f5de7a96600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000341161054b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610542906129e2565b60405180910390fd5b6104b06002544261055c9190612a31565b1061059c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059390612ab1565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1661079d576000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060016000815461064290612ad1565b9190508190558160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034816002018190555060018160050160006101000a81548160ff02191690831515021790555060008160030181905550600081600401819055506006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6559452b5cf88e12990371c9441273d2dbb464fb7dd9cc4030551b86df924b6281600001548260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836002015460405161078f93929190612b19565b60405180910390a1506107fd565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050348160020160008282546107f49190612b50565b92505081905550505b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610886576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610915576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109c2576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a91576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860009054906101000a900460ff166001811115610ab357610ab2612956565b5b60006001811115610ac757610ac6612956565b5b03610afe576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600860006101000a81548160ff02191690836001811115610b2457610b23612956565b5b02179055504260028190555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff22abd93b9682674a6b5ebbb244653f7cc25bfab21953abff8d9e8627883557660025482604051610be5929190612b84565b60405180910390a150565b6000610c0a60405180602001604052806000815250610caf565b50905080610c7057600860009054906101000a900460ff166001811115610c3457610c33612956565b5b6040517f8af44fe0000000000000000000000000000000000000000000000000000000008152600401610c67919061250b565b60405180910390fd5b6001600860006101000a81548160ff02191690836001811115610c9657610c95612956565b5b02179055508015610caa57610ca961233f565b5b505050565b600060606000600860009054906101000a900460ff166001811115610cd757610cd6612956565b5b60006001811115610ceb57610cea612956565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610d1f9190612a31565b119050818015610d2c5750805b93505050915091565b60076020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e25576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ef6576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f81576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a601e60025442610f939190612a31565b610f9d9190612bdc565b610fa79190612c0d565b7f0000000000000000000000000000000000000000000000000000000000000000610fd29190612c85565b6000819055506000805413158061100b57507f000000000000000000000000000000000000000000000000000000000000000060005413155b15611038577f00000000000000000000000000000000000000000000000000000000000000006000819055505b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110c1576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461116e576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461123d576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860009054906101000a900460ff16600181111561125f5761125e612956565b5b6000600181111561127357611272612956565b5b036112aa576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112b2610efc565b60007f0000000000000000000000000000000000000000000000000000000000000000905060005b600680549050811015611d4657600054600760006006848154811061130257611301612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546113759190612bdc565b82111561152e57600054600760006006848154811061139757611396612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461140a9190612bdc565b600760006006848154811061142257611421612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060005460076000600684815481106114a9576114a8612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461151c9190612bdc565b826115279190612a31565b9150611d33565b6000821180156115cb5750600054600760006006848154811061155457611553612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546115c79190612bdc565b8211155b156119c8578160076000600684815481106115e9576115e8612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060009150600054600760006006848154811061167457611673612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546116e79190612cf7565b60076000600684815481106116ff576116fe612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546117729190612a31565b600760006006848154811061178a57611789612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550600060076000600684815481106118105761180f612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660076000600685815481106118c7576118c6612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015460405161193c90612d6a565b60006040518083038185875af1925050503d8060008114611979576040519150601f19603f3d011682016040523d82523d6000602084013e61197e565b606091505b50509050806119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b990612dcb565b60405180910390fd5b50611d32565b60008211158015611a595750600060076000600684815481106119ee576119ed612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154145b15611d31576007600060068381548110611a7657611a75612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546007600060068481548110611af757611af6612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555060006007600060068481548110611b7d57611b7c612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166007600060068581548110611c3457611c33612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154604051611ca990612d6a565b60006040518083038185875af1925050503d8060008114611ce6576040519150601f19603f3d011682016040523d82523d6000602084013e611ceb565b606091505b5050905080611d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2690612dcb565b60405180910390fd5b505b5b5b8080611d3e90612ad1565b9150506112da565b506000811115611d5857806003819055505b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611de2576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e8f576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f1c576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860009054906101000a900460ff166001811115611f3e57611f3d612956565b5b60006001811115611f5257611f51612956565b5b03611f89576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60068054905081101561233c5760006007600060068481548110611fb357611fb2612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154111561232957600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b36006838154811061207457612073612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a764000060076000600687815481106120c0576120bf612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546121339190612cf7565b6040518363ffffffff1660e01b8152600401612150929190612deb565b6020604051808303816000875af115801561216f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121939190612e40565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000006006848154811061220757612206612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a7640000600760006006888154811061225357612252612cc8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546122c69190612cf7565b6040518463ffffffff1660e01b81526004016122e493929190612e6d565b6020604051808303816000875af1158015612303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123279190612e40565b505b808061233490612ad1565b915050611f8c565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146123c4576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600860006101000a81548160ff021916908360018111156123ea576123e9612956565b5b02179055506123f76111b8565b6123ff611e97565b600060035411156124bc57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac7f00000000000000000000000000000000000000000000000000000000000000006003546040518363ffffffff1660e01b8152600401612489929190612deb565b600060405180830381600087803b1580156124a357600080fd5b505af11580156124b7573d6000803e3d6000fd5b505050505b565b6000819050919050565b6124d1816124be565b82525050565b60006020820190506124ec60008301846124c8565b92915050565b6000819050919050565b612505816124f2565b82525050565b600060208201905061252060008301846124fc565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125658261253a565b9050919050565b6125758161255a565b811461258057600080fd5b50565b6000813590506125928161256c565b92915050565b6000602082840312156125ae576125ad612530565b5b60006125bc84828501612583565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125ea576125e96125c5565b5b8235905067ffffffffffffffff811115612607576126066125ca565b5b602083019150836001820283011115612623576126226125cf565b5b9250929050565b6000806020838503121561264157612640612530565b5b600083013567ffffffffffffffff81111561265f5761265e612535565b5b61266b858286016125d4565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126c58261267c565b810181811067ffffffffffffffff821117156126e4576126e361268d565b5b80604052505050565b60006126f7612526565b905061270382826126bc565b919050565b600067ffffffffffffffff8211156127235761272261268d565b5b61272c8261267c565b9050602081019050919050565b82818337600083830152505050565b600061275b61275684612708565b6126ed565b90508281526020810184848401111561277757612776612677565b5b612782848285612739565b509392505050565b600082601f83011261279f5761279e6125c5565b5b81356127af848260208601612748565b91505092915050565b6000602082840312156127ce576127cd612530565b5b600082013567ffffffffffffffff8111156127ec576127eb612535565b5b6127f88482850161278a565b91505092915050565b60008115159050919050565b61281681612801565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561285657808201518184015260208101905061283b565b60008484015250505050565b600061286d8261281c565b6128778185612827565b9350612887818560208601612838565b6128908161267c565b840191505092915050565b60006040820190506128b0600083018561280d565b81810360208301526128c28184612862565b90509392505050565b6128d48161255a565b82525050565b600060c0820190506128ef60008301896124fc565b6128fc60208301886128cb565b61290960408301876124fc565b61291660608301866124fc565b61292360808301856124fc565b61293060a083018461280d565b979650505050505050565b600060208201905061295060008301846128cb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f62696456616c7565206c657373207468616e2030000000000000000000000000600082015250565b60006129cc601483612985565b91506129d782612996565b602082019050919050565b600060208201905081810360008301526129fb816129bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a3c826124f2565b9150612a47836124f2565b9250828203905081811115612a5f57612a5e612a02565b5b92915050565b7f74696d6520697320757000000000000000000000000000000000000000000000600082015250565b6000612a9b600a83612985565b9150612aa682612a65565b602082019050919050565b60006020820190508181036000830152612aca81612a8e565b9050919050565b6000612adc826124f2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b0e57612b0d612a02565b5b600182019050919050565b6000606082019050612b2e60008301866124fc565b612b3b60208301856128cb565b612b4860408301846124fc565b949350505050565b6000612b5b826124f2565b9150612b66836124f2565b9250828201905080821115612b7e57612b7d612a02565b5b92915050565b6000604082019050612b9960008301856124fc565b612ba660208301846128cb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612be7826124f2565b9150612bf2836124f2565b925082612c0257612c01612bad565b5b828204905092915050565b6000612c18826124be565b9150612c23836124be565b9250828202612c31816124be565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615612c6957612c68612a02565b5b8282058414831517612c7e57612c7d612a02565b5b5092915050565b6000612c90826124be565b9150612c9b836124be565b9250828203905081811260008412168282136000851215161715612cc257612cc1612a02565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612d02826124f2565b9150612d0d836124f2565b9250828202612d1b816124f2565b91508282048414831517612d3257612d31612a02565b5b5092915050565b600081905092915050565b50565b6000612d54600083612d39565b9150612d5f82612d44565b600082019050919050565b6000612d7582612d47565b9150819050919050565b7f4661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000612db5601483612985565b9150612dc082612d7f565b602082019050919050565b60006020820190508181036000830152612de481612da8565b9050919050565b6000604082019050612e0060008301856128cb565b612e0d60208301846124fc565b9392505050565b612e1d81612801565b8114612e2857600080fd5b50565b600081519050612e3a81612e14565b92915050565b600060208284031215612e5657612e55612530565b5b6000612e6484828501612e2b565b91505092915050565b6000606082019050612e8260008301866128cb565b612e8f60208301856128cb565b612e9c60408301846124fc565b94935050505056fea264697066735822122000ed3e4964c20f98db82ed6bb93f4ce62fc3f51e16c40493844b6468d87a99fd64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "startAuctionEvent(uint256,address)": {
        "notice": "public functions "
      }
    },
    "kind": "user",
    "methods": {
      "retrieveTotalAlgos()": {
        "notice": "View and Pure Function "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 964,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "currentPrice",
        "offset": 0,
        "slot": "0",
        "type": "t_int256"
      },
      {
        "astId": 967,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "totalNumBidders",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 977,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "startTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 982,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "currentUnsoldAlgos",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 987,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "DAToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ERC20Token)1907"
      },
      {
        "astId": 989,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "ERC20ContractAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 992,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "biddersAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 997,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "biddersList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Bidder)1010_storage)"
      },
      {
        "astId": 1016,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "s_auctionState",
        "offset": 0,
        "slot": "8",
        "type": "t_enum(AuctionState)1013"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20Token)1907": {
        "encoding": "inplace",
        "label": "contract ERC20Token",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)1013": {
        "encoding": "inplace",
        "label": "enum Dutch_Auction.AuctionState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Bidder)1010_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Dutch_Auction.Bidder)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidder)1010_storage"
      },
      "t_struct(Bidder)1010_storage": {
        "encoding": "inplace",
        "label": "struct Dutch_Auction.Bidder",
        "members": [
          {
            "astId": 999,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "bidderID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1001,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "walletAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1003,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "bidValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1005,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "totalAlgosPurchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1007,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "refundEth",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1009,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "isExist",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}