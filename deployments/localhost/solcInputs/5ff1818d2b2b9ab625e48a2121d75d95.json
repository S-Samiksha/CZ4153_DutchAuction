{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Dutch_Auction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.21;\r\n\r\n// Using our own ERC20Token\r\nimport \"./ERC20Token.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\r\n\r\nerror Dutch_Auction__NotOwner();\r\nerror Dutch_Auction__IsOwner();\r\nerror Dutch_Auction__NotOpen();\r\nerror Dutch_Auction__UpKeepNotNeeded(uint256 auctionState);\r\n\r\ncontract Dutch_Auction is AutomationCompatibleInterface {\r\n    uint256 private currentPrice; //in wei\r\n    uint256 private currentUnsoldAlgos;\r\n    uint256 private totalNumBidders = 0;\r\n    uint256 private startPrice; //in wei\r\n\r\n    /* Set in constructor, cannot be changed afterwards, only retrived */\r\n    uint256 private immutable reservePrice;\r\n    address private immutable i_owner;\r\n    uint256 private immutable totalAlgosAvailable;\r\n    uint256 private immutable startTime;\r\n    uint256 public endTime;\r\n\r\n    ERC20Token private immutable DAToken; //importing Token\r\n    address private immutable ERC20ContractAddress;\r\n\r\n    struct Bidder {\r\n        uint256 bidderID;\r\n        address walletAddress;\r\n        uint256 bidValue; //the value they paid to the contract to purchase the algo\r\n        uint256 totalAlgosPurchased; //this will change everytime somebody else bids\r\n        bool isExist;\r\n    }\r\n\r\n    /*mappings and arrays*/\r\n    address[] biddersAddress;\r\n    mapping(address => Bidder) public biddersList; //to be made private later <for debugging purposes>\r\n\r\n    // Variable to indicate auction's state --> type declaration\r\n    enum AuctionState {\r\n        OPEN,\r\n        CLOSING\r\n    } // uint256 0: OPEN, 1: CLOSED\r\n\r\n    AuctionState private s_auctionState;\r\n\r\n    uint256 private s_lastTimeStamp;\r\n    uint256 private immutable i_interval;\r\n\r\n    /*Constructor*/\r\n    constructor(\r\n        uint256 _reservePrice,\r\n        uint256 _startPrice,\r\n        uint256 _totalAlgosAvailable,\r\n        address _token,\r\n        uint256 _interval\r\n    ) {\r\n        require(\r\n            _reservePrice < _startPrice,\r\n            \"reserve price is higher than current price\"\r\n        );\r\n        i_owner = msg.sender;\r\n        reservePrice = _reservePrice;\r\n        totalAlgosAvailable = _totalAlgosAvailable;\r\n        currentUnsoldAlgos = _totalAlgosAvailable;\r\n        currentPrice = _startPrice;\r\n        startPrice = _startPrice;\r\n        startTime = block.timestamp; //Start time of when the contract is deployed\r\n        DAToken = ERC20Token(_token);\r\n        ERC20ContractAddress = _token;\r\n        s_auctionState = AuctionState.OPEN;\r\n        s_lastTimeStamp = block.timestamp;\r\n        // i_interval = 20 * 60; //20minutes in seconds\r\n        i_interval = _interval;\r\n    }\r\n\r\n    /* modifiers */\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == owner);\r\n        if (msg.sender != i_owner) revert Dutch_Auction__NotOwner();\r\n        _; //do the rest of the function\r\n    }\r\n\r\n    modifier notOwner() {\r\n        // require(msg.sender == owner);\r\n        if (msg.sender == i_owner) revert Dutch_Auction__IsOwner();\r\n        _; //do the rest of the function\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev This is the function that ChainLink Keeper nodes call\r\n     * They look for the `upkeepneeded` to return true\r\n     * The following should be true in order to return true\r\n     * 1. Time interval should have passed (20minutes)\r\n     * 2. Subscription is funded with LINK\r\n     * 3. Auction should be in \"open\" state\r\n     *\r\n     *\r\n     * @notice Sam Notes:\r\n     * Here is the variable equivalents :\r\n     * s_lastTimeStamp ====> startTime\r\n     * After the 20minutes is up, simply endAuction();\r\n     * It will do the burn and send the tokens as well\r\n     */\r\n\r\n    function checkUpkeep(\r\n        bytes memory /*checkData*/\r\n    )\r\n        public\r\n        override\r\n        returns (bool upkeepNeeded, bytes memory /* performData */)\r\n    {\r\n        bool isOpen = AuctionState.OPEN == s_auctionState;\r\n        // need to check (block.timestamp - last block timestamp) > interval\r\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\r\n        // if this is true, end auction and burn tokens\r\n        upkeepNeeded = (isOpen && timePassed); // if true, end auction\r\n    }\r\n\r\n    function performUpkeep(bytes calldata /* performData */) external override {\r\n        // want some validation such that only gets called when checkupkeep is true\r\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\r\n        // if ((block.timestamp - lastTimeStamp) > interval) {\r\n        //     lastTimeStamp = block.timestamp;\r\n        // }\r\n        if (!upkeepNeeded) {\r\n            revert Dutch_Auction__UpKeepNotNeeded(uint256(s_auctionState));\r\n        }\r\n        s_auctionState = AuctionState.CLOSING;\r\n        // only owner can end auction\r\n\r\n        if (upkeepNeeded) {\r\n            // if never sell finish, burn all remaining algos\r\n            endAuction();\r\n        }\r\n    }\r\n\r\n    /***\r\n     * -------------------------------------------------------------------------------------\r\n     * -------------------------------------------------------------------------------------\r\n     * -------------------------------------------------------------------------------------\r\n     * -------------------------------------------------------------------------------------\r\n     * -------------------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * public functions\r\n     *\r\n     * */\r\n\r\n    //Reference: https://docs.soliditylang.org/en/latest/types.html#structs\r\n    function addBidder() public payable notOwner {\r\n        //call updatePrice function\r\n        updateCurrentPrice();\r\n        //checking all the requirements\r\n        // require(_bidValue == msg.value, \"bidValue stated is not what was sent\");\r\n        uint256 _bidValue = msg.value; // alternative way\r\n        require(\r\n            reservePrice < currentPrice,\r\n            \"Lower or equal to reserve price! Ending Auction!\"\r\n        );\r\n        require(currentUnsoldAlgos > 0, \"All Algos Sold! Ending Auction! \");\r\n        // if (currentUnsoldAlgos == 0){\r\n        //     endAuction();\r\n        // }\r\n        require(_bidValue >= currentPrice, \"bidValue lower than currentPrice\"); //bidValue has to be higher inorder to purchase\r\n        require(\r\n            _bidValue / currentPrice <= currentUnsoldAlgos,\r\n            \"Not enough algos for you!\"\r\n        );\r\n        require(block.timestamp - startTime < 1200, \"time is up\");\r\n\r\n        // Adding or Updating the bidders currently in the contract\r\n        if (!biddersList[msg.sender].isExist) {\r\n            Bidder storage newBidder = biddersList[msg.sender]; //get the object\r\n            //set the variables\r\n            newBidder.bidderID = ++totalNumBidders;\r\n            newBidder.walletAddress = msg.sender;\r\n            newBidder.bidValue = _bidValue;\r\n            newBidder.totalAlgosPurchased = _bidValue / currentPrice; //need to check the math\r\n            newBidder.isExist = true;\r\n            biddersAddress.push(msg.sender);\r\n        } else {\r\n            Bidder storage existingBidder = biddersList[msg.sender]; //get the object\r\n            existingBidder.bidValue += _bidValue;\r\n            existingBidder.totalAlgosPurchased += _bidValue / currentPrice;\r\n        }\r\n\r\n        //Updating private variables in the contract\r\n        currentUnsoldAlgos -= _bidValue / currentPrice;\r\n\r\n        updateAllBiders();\r\n    }\r\n\r\n    /*Internal Functions */\r\n    //TODO: make this internal later\r\n    function updateCurrentPrice() public {\r\n        //there is 60 seconds in one minute\r\n        // 20 minutes auction\r\n        // price drops by 10 wei every 2 minutes --> actual\r\n        // price drops by 10 wei every 0.5 minutes --> testing purposes\r\n        currentPrice =\r\n            startPrice -\r\n            (uint256((block.timestamp - startTime)) / 30) *\r\n            10;\r\n    }\r\n\r\n    //TODO: can we use IPFS to save gas and make this better?\r\n    function updateAllBiders() internal {\r\n        //obtain current price again in case time elapsed\r\n        updateCurrentPrice();\r\n        currentUnsoldAlgos = totalAlgosAvailable;\r\n        for (uint i = 0; i < biddersAddress.length; i++) {\r\n            biddersList[biddersAddress[i]].totalAlgosPurchased =\r\n                biddersList[biddersAddress[i]].bidValue /\r\n                currentPrice;\r\n            currentUnsoldAlgos -=\r\n                biddersList[biddersAddress[i]].bidValue /\r\n                currentPrice;\r\n        }\r\n    }\r\n\r\n    /*\r\n    triggered when either algos runs out or time runs out \r\n    */\r\n\r\n    function sendTokens() public onlyOwner {\r\n        for (uint i = 0; i < biddersAddress.length; i++) {\r\n            biddersList[biddersAddress[i]].totalAlgosPurchased =\r\n                biddersList[biddersAddress[i]].bidValue /\r\n                currentPrice;\r\n            DAToken.approve(\r\n                biddersAddress[i],\r\n                biddersList[biddersAddress[i]].totalAlgosPurchased * 10 ** 18\r\n            );\r\n            DAToken.transferFrom(\r\n                i_owner,\r\n                biddersAddress[i],\r\n                biddersList[biddersAddress[i]].totalAlgosPurchased * 10 ** 18\r\n            );\r\n        }\r\n    }\r\n\r\n    function endAuction() public onlyOwner {\r\n        sendTokens();\r\n        DAToken.burn(i_owner, currentUnsoldAlgos);\r\n    }\r\n\r\n    /**View and Pure Function */\r\n\r\n    function retrievePrice() public view returns (uint256) {\r\n        return currentPrice;\r\n    }\r\n\r\n    function retrieveAlgosRemaining() public view returns (uint256) {\r\n        return currentUnsoldAlgos;\r\n    }\r\n\r\n    function retrieveTotalAlgos() public view returns (uint256) {\r\n        return totalAlgosAvailable;\r\n    }\r\n\r\n    function retrieveReservePrice() public view returns (uint256) {\r\n        return reservePrice;\r\n    }\r\n\r\n    function retrieveTotalBidder() public view returns (uint256) {\r\n        return totalNumBidders;\r\n    }\r\n\r\n    function retrieveContractOwner() public view returns (address) {\r\n        return i_owner;\r\n    }\r\n\r\n    function retrieveContractBalance() public view onlyOwner returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function retrieveBidderAlgos(address bidder) public view returns (uint256) {\r\n        return biddersList[bidder].totalAlgosPurchased;\r\n    }\r\n}\r\n"
    },
    "contracts/ERC20Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ERC20Token is Context, ERC20, Ownable{\r\n    constructor(uint256 initialSupply) ERC20(\"ERC20Token\", \"ET\") {\r\n        //To Note: there are 18 decimals by default\r\n        // If initial supply is 50, we have to put in 50e18 or 50 * 10**18\r\n        _mint(msg.sender, initialSupply * (10 ** 18)); //Allows us to create the intial amount of tokens\r\n    }\r\n\r\n    function burn(address owner, uint256 amount) public onlyOwner {\r\n        _burn(owner, amount * 10 ** 18);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}