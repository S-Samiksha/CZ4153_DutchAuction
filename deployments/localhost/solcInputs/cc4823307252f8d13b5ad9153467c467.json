{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Dutch_Auction.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.21;\r\n\r\n// Using our own ERC20Token\r\nimport \"./ERC20Token.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\nerror Dutch_Auction__NotOwner();\r\nerror Dutch_Auction__IsOwner();\r\nerror Dutch_Auction__NotOpen();\r\nerror Dutch_Auction__Open();\r\n\r\ncontract Dutch_Auction is ReentrancyGuard {\r\n    int256 private currentPrice; //in wei\r\n    uint256 private totalNumBidders = 0;\r\n    uint256 private immutable startPrice; //in wei\r\n    uint256 private immutable reservePrice;\r\n    address private immutable i_owner;\r\n    uint256 private totalAlgosAvailable;\r\n    uint256 private startTime;\r\n    uint256 private constant AUCTION_TIME = 1200; //in seconds\r\n    uint256 private currentUnsoldAlgos;\r\n    uint256 private changePerMin;\r\n\r\n    ERC20Token private DAToken; //importing Token\r\n    address private ERC20ContractAddress;\r\n    address[] biddersAddress;\r\n\r\n    mapping(address => Bidder) public biddersList; //to be made private later <for debugging purposes>\r\n\r\n    struct Bidder {\r\n        uint256 bidderID;\r\n        address walletAddress;\r\n        uint256 bidValue; //the value they paid to the contract to purchase the algo\r\n        uint256 totalAlgosPurchased;\r\n        uint256 refundEth;\r\n        bool isExist;\r\n    }\r\n\r\n    // Variable to indicate auction's state --> type declaration\r\n    enum AuctionState {\r\n        OPEN,\r\n        CLOSING\r\n    } // uint256 0: OPEN, 1: CLOSED\r\n\r\n    AuctionState private s_auctionState;\r\n\r\n    /*Constructor*/\r\n    constructor(uint256 _reservePrice, uint256 _startPrice) {\r\n        require(\r\n            _reservePrice < _startPrice,\r\n            \"reserve price is higher than current price\"\r\n        );\r\n        i_owner = msg.sender;\r\n        reservePrice = _reservePrice;\r\n        currentPrice = int256(_startPrice);\r\n        startPrice = _startPrice;\r\n\r\n        s_auctionState = AuctionState.CLOSING;\r\n    }\r\n\r\n    /* modifiers */\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == owner);\r\n        if (msg.sender != i_owner) revert Dutch_Auction__NotOwner();\r\n        _; //do the rest of the function\r\n    }\r\n\r\n    modifier notOwner() {\r\n        // require(msg.sender == owner);\r\n        if (msg.sender == i_owner) revert Dutch_Auction__IsOwner();\r\n        _; //do the rest of the function\r\n    }\r\n\r\n    modifier AuctionOpen() {\r\n        // require(msg.sender == owner);\r\n        if (AuctionState.CLOSING == s_auctionState)\r\n            revert Dutch_Auction__NotOpen();\r\n        _; //do the rest of the function\r\n    }\r\n\r\n    modifier AuctionClosed() {\r\n        // require(msg.sender == owner);\r\n        if (AuctionState.OPEN == s_auctionState) revert Dutch_Auction__Open();\r\n        _; //do the rest of the function\r\n    }\r\n\r\n    /***\r\n     * -------------------------------------------------------------------------------------\r\n     * -------------------------------------------------------------------------------------\r\n     * -------------------------------------------------------------------------------------\r\n     * -------------------------------------------------------------------------------------\r\n     * -------------------------------------------------------------------------------------\r\n     */\r\n\r\n    /** Events\r\n     *\r\n     */\r\n    event startAuctionEvent(\r\n        uint256 startTime,\r\n        address ERC20Address,\r\n        uint256 totalAlgosAvailable,\r\n        uint256 changePerMin\r\n    );\r\n    event addBidderEvent(\r\n        uint256 bidderID,\r\n        address walletAddress,\r\n        uint256 bidvalue\r\n    );\r\n    event updateCurrentPriceEvent(uint256 timeElapsed, uint256 currentprice);\r\n    event sendTokenEvent(address bidderAddress, uint256 tokensSent);\r\n    event calculateEvent(\r\n        address bidderAddress,\r\n        uint256 TokensPurchased,\r\n        uint256 refundValue\r\n    );\r\n\r\n    event RefundEvent(\r\n        address bidderAddress,\r\n        uint256 TokensPurchased,\r\n        uint256 refundValue\r\n    );\r\n\r\n    event endAuctionEvent(\r\n        uint256 totalBidders,\r\n        uint256 burntERC20,\r\n        uint totalETHEarned\r\n    );\r\n\r\n    function startAuction(\r\n        uint256 _totalAlgosAvailable,\r\n        uint256 _changePerMin\r\n    ) public onlyOwner AuctionClosed returns (address) {\r\n        s_auctionState = AuctionState.OPEN;\r\n        totalAlgosAvailable = _totalAlgosAvailable;\r\n        changePerMin = _changePerMin;\r\n        startTime = block.timestamp; //Start time of when the contract is deployed\r\n        DAToken = new ERC20Token(totalAlgosAvailable, address(this));\r\n        ERC20ContractAddress = address(DAToken);\r\n        emit startAuctionEvent(\r\n            startTime,\r\n            ERC20ContractAddress,\r\n            totalAlgosAvailable,\r\n            changePerMin\r\n        );\r\n        return ERC20ContractAddress;\r\n    }\r\n\r\n    /**\r\n     * public functions\r\n     *\r\n     * */\r\n\r\n    function addBidder() public payable notOwner AuctionOpen {\r\n        //checking all the requirements\r\n        require(msg.value > 0, \"bidValue less than 0\");\r\n        calculate();\r\n        require(block.timestamp - startTime < AUCTION_TIME, \"time is up\");\r\n        require(currentUnsoldAlgos > 0, \"There is no more algos left\");\r\n\r\n        // Adding or Updating the bidders currently in the contract\r\n        if (!biddersList[msg.sender].isExist) {\r\n            Bidder storage newBidder = biddersList[msg.sender];\r\n            newBidder.bidderID = ++totalNumBidders;\r\n            newBidder.walletAddress = msg.sender;\r\n            newBidder.bidValue = msg.value;\r\n            newBidder.isExist = true;\r\n            newBidder.totalAlgosPurchased = 0;\r\n            newBidder.refundEth = 0;\r\n            biddersAddress.push(msg.sender);\r\n            emit addBidderEvent(\r\n                newBidder.bidderID,\r\n                newBidder.walletAddress,\r\n                newBidder.bidValue\r\n            );\r\n        } else {\r\n            Bidder storage existingBidder = biddersList[msg.sender];\r\n            existingBidder.bidValue += msg.value;\r\n        }\r\n    }\r\n\r\n    function updateCurrentPrice() public {\r\n        currentPrice =\r\n            int256(startPrice) -\r\n            int256((block.timestamp - startTime) / 60) *\r\n            int256(changePerMin);\r\n\r\n        if (currentPrice <= 0 || currentPrice <= int256(reservePrice)) {\r\n            currentPrice = int256(reservePrice);\r\n        }\r\n        emit updateCurrentPriceEvent(\r\n            (block.timestamp - startTime),\r\n            uint256(currentPrice)\r\n        );\r\n    }\r\n\r\n    function sendTokens() public onlyOwner AuctionClosed {\r\n        for (uint i = 0; i < biddersAddress.length; i++) {\r\n            if (biddersList[biddersAddress[i]].totalAlgosPurchased > 0) {\r\n                DAToken.approve(\r\n                    biddersAddress[i],\r\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\r\n                        10 ** 18\r\n                );\r\n                DAToken.transferFrom(\r\n                    address(this),\r\n                    biddersAddress[i],\r\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\r\n                        10 ** 18\r\n                );\r\n                emit sendTokenEvent(\r\n                    biddersAddress[i],\r\n                    biddersList[biddersAddress[i]].totalAlgosPurchased\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function refundETH() public onlyOwner AuctionClosed {\r\n        for (uint i = 0; i < biddersAddress.length; i++) {\r\n            if (\r\n                biddersList[biddersAddress[i]].refundEth > 0 &&\r\n                address(this).balance > biddersList[biddersAddress[i]].refundEth\r\n            ) {\r\n                //refundETH\r\n                uint256 sendValue = biddersList[biddersAddress[i]].refundEth;\r\n                biddersList[biddersAddress[i]].refundEth = 0; // re-entrancy attack prevention\r\n                (bool callSuccess, ) = payable(\r\n                    biddersList[biddersAddress[i]].walletAddress\r\n                ).call{value: sendValue}(\"\");\r\n                sendValue = 0;\r\n                require(callSuccess, \"Failed to send ether\");\r\n                emit RefundEvent(\r\n                    biddersAddress[i],\r\n                    biddersList[biddersAddress[i]].totalAlgosPurchased,\r\n                    sendValue\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculate() public {\r\n        updateCurrentPrice();\r\n        uint256 currentAlgos = totalAlgosAvailable;\r\n        for (uint i = 0; i < biddersAddress.length; i++) {\r\n            //if there is sufficient algos for this current bidder\r\n            if (\r\n                currentAlgos >=\r\n                biddersList[biddersAddress[i]].bidValue / uint256(currentPrice)\r\n            ) {\r\n                biddersList[biddersAddress[i]].totalAlgosPurchased =\r\n                    biddersList[biddersAddress[i]].bidValue /\r\n                    uint256(currentPrice);\r\n                currentAlgos -=\r\n                    biddersList[biddersAddress[i]].bidValue /\r\n                    uint256(currentPrice);\r\n                biddersList[biddersAddress[i]].refundEth = 0;\r\n            }\r\n            //Else if there is algos left but it is less than the amount the bidder bidded\r\n            // he gets all the remaining algos and is refunded the ETH.\r\n            else if (\r\n                currentAlgos > 0 &&\r\n                currentAlgos <\r\n                biddersList[biddersAddress[i]].bidValue / uint256(currentPrice)\r\n            ) {\r\n                biddersList[biddersAddress[i]]\r\n                    .totalAlgosPurchased = currentAlgos;\r\n                currentAlgos = 0;\r\n                biddersList[biddersAddress[i]].refundEth =\r\n                    biddersList[biddersAddress[i]].bidValue -\r\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\r\n                    uint256(currentPrice);\r\n            }\r\n            //there is no algos left\r\n            // reset the total algos purchased to 0\r\n            else if (currentAlgos <= 0) {\r\n                //refund for the rest\r\n                biddersList[biddersAddress[i]].totalAlgosPurchased = 0;\r\n                biddersList[biddersAddress[i]].refundEth = biddersList[\r\n                    biddersAddress[i]\r\n                ].bidValue;\r\n            }\r\n            emit RefundEvent(\r\n                biddersAddress[i],\r\n                biddersList[biddersAddress[i]].totalAlgosPurchased,\r\n                biddersList[biddersAddress[i]].refundEth\r\n            );\r\n        }\r\n\r\n        if (currentAlgos > 0) {\r\n            currentUnsoldAlgos = currentAlgos;\r\n        } else {\r\n            s_auctionState = AuctionState.CLOSING;\r\n            currentUnsoldAlgos = 0;\r\n        }\r\n    }\r\n\r\n    function endAuction() public onlyOwner {\r\n        s_auctionState = AuctionState.CLOSING;\r\n        calculate();\r\n        sendTokens();\r\n        refundETH();\r\n        if (currentUnsoldAlgos > 0) {\r\n            DAToken.burn(address(this), currentUnsoldAlgos);\r\n        }\r\n        emit endAuctionEvent(\r\n            totalNumBidders,\r\n            currentUnsoldAlgos,\r\n            address(this).balance\r\n        );\r\n    }\r\n\r\n    /**View and Pure Function */\r\n\r\n    function retrieveTotalAlgos() public view onlyOwner returns (uint256) {\r\n        return totalAlgosAvailable;\r\n    }\r\n\r\n    function retrieveReservePrice() public view onlyOwner returns (uint256) {\r\n        return reservePrice;\r\n    }\r\n\r\n    function retrieveCurrentPrice() public view onlyOwner returns (int256) {\r\n        return currentPrice;\r\n    }\r\n\r\n    function retrieveTotalBidder() public view onlyOwner returns (uint256) {\r\n        return totalNumBidders;\r\n    }\r\n\r\n    function retrieveContractOwner() public view onlyOwner returns (address) {\r\n        return i_owner;\r\n    }\r\n\r\n    function retrieveContractBalance() public view onlyOwner returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function retrieveBidderBidValue(\r\n        address bidder\r\n    ) public view onlyOwner returns (uint256) {\r\n        return biddersList[bidder].bidValue;\r\n    }\r\n\r\n    function retrieveBidderAlgos(\r\n        address bidder\r\n    ) public view onlyOwner returns (uint256) {\r\n        return biddersList[bidder].totalAlgosPurchased;\r\n    }\r\n\r\n    function retrieveRefund(\r\n        address bidder\r\n    ) public view onlyOwner returns (uint256) {\r\n        return biddersList[bidder].refundEth;\r\n    }\r\n\r\n    function balanceOfBidder(address bidder) public view returns (uint256) {\r\n        return DAToken.balanceOf(bidder);\r\n    }\r\n\r\n    fallback() external payable {\r\n        addBidder();\r\n    }\r\n\r\n    receive() external payable {\r\n        addBidder();\r\n    }\r\n\r\n    function getAuctionState() public view returns (AuctionState) {\r\n        return s_auctionState;\r\n    }\r\n}\r\n"
    },
    "contracts/ERC20Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ERC20Token is Context, ERC20, Ownable {\r\n    constructor(\r\n        uint256 initialSupply,\r\n        address contractAddress\r\n    ) Ownable(msg.sender) ERC20(\"ERC20Token\", \"ET\") {\r\n        _mint(msg.sender, initialSupply * (10 ** 18));\r\n        approve(contractAddress, initialSupply * (10 ** 18));\r\n    }\r\n\r\n    function burn(address i_owner, uint256 amount) public onlyOwner {\r\n        _burn(i_owner, amount * 10 ** 18);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}