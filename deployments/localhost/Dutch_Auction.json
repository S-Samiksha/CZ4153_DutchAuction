{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__IsOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__Open",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TokensPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundValue",
          "type": "uint256"
        }
      ],
      "name": "RefundEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidderID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidvalue",
          "type": "uint256"
        }
      ],
      "name": "addBidderEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TokensPurchased",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundValue",
          "type": "uint256"
        }
      ],
      "name": "calculateEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBidders",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burntERC20",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalETHEarned",
          "type": "uint256"
        }
      ],
      "name": "endAuctionEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSent",
          "type": "uint256"
        }
      ],
      "name": "sendTokenEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ERC20Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAlgosAvailable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "changePerMin",
          "type": "uint256"
        }
      ],
      "name": "startAuctionEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeElapsed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentprice",
          "type": "uint256"
        }
      ],
      "name": "updateCurrentPriceEvent",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "addBidder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "balanceOfBidder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "biddersList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidderID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bidValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAlgosPurchased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refundEth",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionState",
      "outputs": [
        {
          "internalType": "enum Dutch_Auction.AuctionState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "retrieveBidderAlgos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "retrieveBidderBidValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveContractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveCurrentPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "retrieveRefund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalAlgos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalBidder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalAlgosAvailable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_changePerMin",
          "type": "uint256"
        }
      ],
      "name": "startAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCurrentPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xec38e2dc649890e3ee3a5ef99fb0967553d55b1e038623bc81e1b6fc126f0a8a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4740142",
    "logsBloom": "0x
    "blockHash": "0x99855792096cfad3a9e37aad3cfe4fcd394a5c1d2464e317f22cb7da375d3692",
    "transactionHash": "0xec38e2dc649890e3ee3a5ef99fb0967553d55b1e038623bc81e1b6fc126f0a8a",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "4740142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    50
  ],
  "numDeployments": 1,
  "solcInputHash": "cc4823307252f8d13b5ad9153467c467",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Dutch_Auction__IsOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dutch_Auction__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dutch_Auction__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dutch_Auction__Open\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokensPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundValue\",\"type\":\"uint256\"}],\"name\":\"RefundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidvalue\",\"type\":\"uint256\"}],\"name\":\"addBidderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokensPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundValue\",\"type\":\"uint256\"}],\"name\":\"calculateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBidders\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntERC20\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalETHEarned\",\"type\":\"uint256\"}],\"name\":\"endAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSent\",\"type\":\"uint256\"}],\"name\":\"sendTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAlgosAvailable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changePerMin\",\"type\":\"uint256\"}],\"name\":\"startAuctionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentprice\",\"type\":\"uint256\"}],\"name\":\"updateCurrentPriceEvent\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"addBidder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"balanceOfBidder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"biddersList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidderID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAlgosPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundEth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionState\",\"outputs\":[{\"internalType\":\"enum Dutch_Auction.AuctionState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"retrieveBidderAlgos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"retrieveBidderBidValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveCurrentPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"retrieveRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalAlgos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalBidder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAlgosAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_changePerMin\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCurrentPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"startAuctionEvent(uint256,address,uint256,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"addBidder()\":{\"notice\":\"public functions \"},\"retrieveTotalAlgos()\":{\"notice\":\"View and Pure Function \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dutch_Auction.sol\":\"Dutch_Auction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Dutch_Auction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\n// Using our own ERC20Token\\r\\nimport \\\"./ERC20Token.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror Dutch_Auction__NotOwner();\\r\\nerror Dutch_Auction__IsOwner();\\r\\nerror Dutch_Auction__NotOpen();\\r\\nerror Dutch_Auction__Open();\\r\\n\\r\\ncontract Dutch_Auction is ReentrancyGuard {\\r\\n    int256 private currentPrice; //in wei\\r\\n    uint256 private totalNumBidders = 0;\\r\\n    uint256 private immutable startPrice; //in wei\\r\\n    uint256 private immutable reservePrice;\\r\\n    address private immutable i_owner;\\r\\n    uint256 private totalAlgosAvailable;\\r\\n    uint256 private startTime;\\r\\n    uint256 private constant AUCTION_TIME = 1200; //in seconds\\r\\n    uint256 private currentUnsoldAlgos;\\r\\n    uint256 private changePerMin;\\r\\n\\r\\n    ERC20Token private DAToken; //importing Token\\r\\n    address private ERC20ContractAddress;\\r\\n    address[] biddersAddress;\\r\\n\\r\\n    mapping(address => Bidder) public biddersList; //to be made private later <for debugging purposes>\\r\\n\\r\\n    struct Bidder {\\r\\n        uint256 bidderID;\\r\\n        address walletAddress;\\r\\n        uint256 bidValue; //the value they paid to the contract to purchase the algo\\r\\n        uint256 totalAlgosPurchased;\\r\\n        uint256 refundEth;\\r\\n        bool isExist;\\r\\n    }\\r\\n\\r\\n    // Variable to indicate auction's state --> type declaration\\r\\n    enum AuctionState {\\r\\n        OPEN,\\r\\n        CLOSING\\r\\n    } // uint256 0: OPEN, 1: CLOSED\\r\\n\\r\\n    AuctionState private s_auctionState;\\r\\n\\r\\n    /*Constructor*/\\r\\n    constructor(uint256 _reservePrice, uint256 _startPrice) {\\r\\n        require(\\r\\n            _reservePrice < _startPrice,\\r\\n            \\\"reserve price is higher than current price\\\"\\r\\n        );\\r\\n        i_owner = msg.sender;\\r\\n        reservePrice = _reservePrice;\\r\\n        currentPrice = int256(_startPrice);\\r\\n        startPrice = _startPrice;\\r\\n\\r\\n        s_auctionState = AuctionState.CLOSING;\\r\\n    }\\r\\n\\r\\n    /* modifiers */\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender != i_owner) revert Dutch_Auction__NotOwner();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    modifier notOwner() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender == i_owner) revert Dutch_Auction__IsOwner();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    modifier AuctionOpen() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (AuctionState.CLOSING == s_auctionState)\\r\\n            revert Dutch_Auction__NotOpen();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    modifier AuctionClosed() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (AuctionState.OPEN == s_auctionState) revert Dutch_Auction__Open();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    /***\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     */\\r\\n\\r\\n    /** Events\\r\\n     *\\r\\n     */\\r\\n    event startAuctionEvent(\\r\\n        uint256 startTime,\\r\\n        address ERC20Address,\\r\\n        uint256 totalAlgosAvailable,\\r\\n        uint256 changePerMin\\r\\n    );\\r\\n    event addBidderEvent(\\r\\n        uint256 bidderID,\\r\\n        address walletAddress,\\r\\n        uint256 bidvalue\\r\\n    );\\r\\n    event updateCurrentPriceEvent(uint256 timeElapsed, uint256 currentprice);\\r\\n    event sendTokenEvent(address bidderAddress, uint256 tokensSent);\\r\\n    event calculateEvent(\\r\\n        address bidderAddress,\\r\\n        uint256 TokensPurchased,\\r\\n        uint256 refundValue\\r\\n    );\\r\\n\\r\\n    event RefundEvent(\\r\\n        address bidderAddress,\\r\\n        uint256 TokensPurchased,\\r\\n        uint256 refundValue\\r\\n    );\\r\\n\\r\\n    event endAuctionEvent(\\r\\n        uint256 totalBidders,\\r\\n        uint256 burntERC20,\\r\\n        uint totalETHEarned\\r\\n    );\\r\\n\\r\\n    function startAuction(\\r\\n        uint256 _totalAlgosAvailable,\\r\\n        uint256 _changePerMin\\r\\n    ) public onlyOwner AuctionClosed returns (address) {\\r\\n        s_auctionState = AuctionState.OPEN;\\r\\n        totalAlgosAvailable = _totalAlgosAvailable;\\r\\n        changePerMin = _changePerMin;\\r\\n        startTime = block.timestamp; //Start time of when the contract is deployed\\r\\n        DAToken = new ERC20Token(totalAlgosAvailable, address(this));\\r\\n        ERC20ContractAddress = address(DAToken);\\r\\n        emit startAuctionEvent(\\r\\n            startTime,\\r\\n            ERC20ContractAddress,\\r\\n            totalAlgosAvailable,\\r\\n            changePerMin\\r\\n        );\\r\\n        return ERC20ContractAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * public functions\\r\\n     *\\r\\n     * */\\r\\n\\r\\n    function addBidder() public payable notOwner AuctionOpen {\\r\\n        //checking all the requirements\\r\\n        require(msg.value > 0, \\\"bidValue less than 0\\\");\\r\\n        calculate();\\r\\n        require(block.timestamp - startTime < AUCTION_TIME, \\\"time is up\\\");\\r\\n        require(currentUnsoldAlgos > 0, \\\"There is no more algos left\\\");\\r\\n\\r\\n        // Adding or Updating the bidders currently in the contract\\r\\n        if (!biddersList[msg.sender].isExist) {\\r\\n            Bidder storage newBidder = biddersList[msg.sender];\\r\\n            newBidder.bidderID = ++totalNumBidders;\\r\\n            newBidder.walletAddress = msg.sender;\\r\\n            newBidder.bidValue = msg.value;\\r\\n            newBidder.isExist = true;\\r\\n            newBidder.totalAlgosPurchased = 0;\\r\\n            newBidder.refundEth = 0;\\r\\n            biddersAddress.push(msg.sender);\\r\\n            emit addBidderEvent(\\r\\n                newBidder.bidderID,\\r\\n                newBidder.walletAddress,\\r\\n                newBidder.bidValue\\r\\n            );\\r\\n        } else {\\r\\n            Bidder storage existingBidder = biddersList[msg.sender];\\r\\n            existingBidder.bidValue += msg.value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateCurrentPrice() public {\\r\\n        currentPrice =\\r\\n            int256(startPrice) -\\r\\n            int256((block.timestamp - startTime) / 60) *\\r\\n            int256(changePerMin);\\r\\n\\r\\n        if (currentPrice <= 0 || currentPrice <= int256(reservePrice)) {\\r\\n            currentPrice = int256(reservePrice);\\r\\n        }\\r\\n        emit updateCurrentPriceEvent(\\r\\n            (block.timestamp - startTime),\\r\\n            uint256(currentPrice)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sendTokens() public onlyOwner AuctionClosed {\\r\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\r\\n            if (biddersList[biddersAddress[i]].totalAlgosPurchased > 0) {\\r\\n                DAToken.approve(\\r\\n                    biddersAddress[i],\\r\\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\\r\\n                        10 ** 18\\r\\n                );\\r\\n                DAToken.transferFrom(\\r\\n                    address(this),\\r\\n                    biddersAddress[i],\\r\\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\\r\\n                        10 ** 18\\r\\n                );\\r\\n                emit sendTokenEvent(\\r\\n                    biddersAddress[i],\\r\\n                    biddersList[biddersAddress[i]].totalAlgosPurchased\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function refundETH() public onlyOwner AuctionClosed {\\r\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\r\\n            if (\\r\\n                biddersList[biddersAddress[i]].refundEth > 0 &&\\r\\n                address(this).balance > biddersList[biddersAddress[i]].refundEth\\r\\n            ) {\\r\\n                //refundETH\\r\\n                uint256 sendValue = biddersList[biddersAddress[i]].refundEth;\\r\\n                biddersList[biddersAddress[i]].refundEth = 0; // re-entrancy attack prevention\\r\\n                (bool callSuccess, ) = payable(\\r\\n                    biddersList[biddersAddress[i]].walletAddress\\r\\n                ).call{value: sendValue}(\\\"\\\");\\r\\n                sendValue = 0;\\r\\n                require(callSuccess, \\\"Failed to send ether\\\");\\r\\n                emit RefundEvent(\\r\\n                    biddersAddress[i],\\r\\n                    biddersList[biddersAddress[i]].totalAlgosPurchased,\\r\\n                    sendValue\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculate() public {\\r\\n        updateCurrentPrice();\\r\\n        uint256 currentAlgos = totalAlgosAvailable;\\r\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\r\\n            //if there is sufficient algos for this current bidder\\r\\n            if (\\r\\n                currentAlgos >=\\r\\n                biddersList[biddersAddress[i]].bidValue / uint256(currentPrice)\\r\\n            ) {\\r\\n                biddersList[biddersAddress[i]].totalAlgosPurchased =\\r\\n                    biddersList[biddersAddress[i]].bidValue /\\r\\n                    uint256(currentPrice);\\r\\n                currentAlgos -=\\r\\n                    biddersList[biddersAddress[i]].bidValue /\\r\\n                    uint256(currentPrice);\\r\\n                biddersList[biddersAddress[i]].refundEth = 0;\\r\\n            }\\r\\n            //Else if there is algos left but it is less than the amount the bidder bidded\\r\\n            // he gets all the remaining algos and is refunded the ETH.\\r\\n            else if (\\r\\n                currentAlgos > 0 &&\\r\\n                currentAlgos <\\r\\n                biddersList[biddersAddress[i]].bidValue / uint256(currentPrice)\\r\\n            ) {\\r\\n                biddersList[biddersAddress[i]]\\r\\n                    .totalAlgosPurchased = currentAlgos;\\r\\n                currentAlgos = 0;\\r\\n                biddersList[biddersAddress[i]].refundEth =\\r\\n                    biddersList[biddersAddress[i]].bidValue -\\r\\n                    biddersList[biddersAddress[i]].totalAlgosPurchased *\\r\\n                    uint256(currentPrice);\\r\\n            }\\r\\n            //there is no algos left\\r\\n            // reset the total algos purchased to 0\\r\\n            else if (currentAlgos <= 0) {\\r\\n                //refund for the rest\\r\\n                biddersList[biddersAddress[i]].totalAlgosPurchased = 0;\\r\\n                biddersList[biddersAddress[i]].refundEth = biddersList[\\r\\n                    biddersAddress[i]\\r\\n                ].bidValue;\\r\\n            }\\r\\n            emit RefundEvent(\\r\\n                biddersAddress[i],\\r\\n                biddersList[biddersAddress[i]].totalAlgosPurchased,\\r\\n                biddersList[biddersAddress[i]].refundEth\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (currentAlgos > 0) {\\r\\n            currentUnsoldAlgos = currentAlgos;\\r\\n        } else {\\r\\n            s_auctionState = AuctionState.CLOSING;\\r\\n            currentUnsoldAlgos = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function endAuction() public onlyOwner {\\r\\n        s_auctionState = AuctionState.CLOSING;\\r\\n        calculate();\\r\\n        sendTokens();\\r\\n        refundETH();\\r\\n        if (currentUnsoldAlgos > 0) {\\r\\n            DAToken.burn(address(this), currentUnsoldAlgos);\\r\\n        }\\r\\n        emit endAuctionEvent(\\r\\n            totalNumBidders,\\r\\n            currentUnsoldAlgos,\\r\\n            address(this).balance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**View and Pure Function */\\r\\n\\r\\n    function retrieveTotalAlgos() public view onlyOwner returns (uint256) {\\r\\n        return totalAlgosAvailable;\\r\\n    }\\r\\n\\r\\n    function retrieveReservePrice() public view onlyOwner returns (uint256) {\\r\\n        return reservePrice;\\r\\n    }\\r\\n\\r\\n    function retrieveCurrentPrice() public view onlyOwner returns (int256) {\\r\\n        return currentPrice;\\r\\n    }\\r\\n\\r\\n    function retrieveTotalBidder() public view onlyOwner returns (uint256) {\\r\\n        return totalNumBidders;\\r\\n    }\\r\\n\\r\\n    function retrieveContractOwner() public view onlyOwner returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function retrieveContractBalance() public view onlyOwner returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function retrieveBidderBidValue(\\r\\n        address bidder\\r\\n    ) public view onlyOwner returns (uint256) {\\r\\n        return biddersList[bidder].bidValue;\\r\\n    }\\r\\n\\r\\n    function retrieveBidderAlgos(\\r\\n        address bidder\\r\\n    ) public view onlyOwner returns (uint256) {\\r\\n        return biddersList[bidder].totalAlgosPurchased;\\r\\n    }\\r\\n\\r\\n    function retrieveRefund(\\r\\n        address bidder\\r\\n    ) public view onlyOwner returns (uint256) {\\r\\n        return biddersList[bidder].refundEth;\\r\\n    }\\r\\n\\r\\n    function balanceOfBidder(address bidder) public view returns (uint256) {\\r\\n        return DAToken.balanceOf(bidder);\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        addBidder();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        addBidder();\\r\\n    }\\r\\n\\r\\n    function getAuctionState() public view returns (AuctionState) {\\r\\n        return s_auctionState;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4dd97bc1b94a2096bb79ef2af1de9cf265d77bceeb2c8d1bc9ab10b5017e57ac\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract ERC20Token is Context, ERC20, Ownable {\\r\\n    constructor(\\r\\n        uint256 initialSupply,\\r\\n        address contractAddress\\r\\n    ) Ownable(msg.sender) ERC20(\\\"ERC20Token\\\", \\\"ET\\\") {\\r\\n        _mint(msg.sender, initialSupply * (10 ** 18));\\r\\n        approve(contractAddress, initialSupply * (10 ** 18));\\r\\n    }\\r\\n\\r\\n    function burn(address i_owner, uint256 amount) public onlyOwner {\\r\\n        _burn(i_owner, amount * 10 ** 18);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x32cf7ad49680c7617717bb67c29a061dfdcf6714b0e420392fccce39d747be43\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260006002553480156200001657600080fd5b50604051620056f8380380620056f883398181016040528101906200003c91906200014a565b600160008190555080821062000089576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000809062000218565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508160a081815250508060018190555080608081815250506001600b60006101000a81548160ff02191690836001811115620000fd57620000fc6200023a565b5b0217905550505062000269565b600080fd5b6000819050919050565b62000124816200010f565b81146200013057600080fd5b50565b600081519050620001448162000119565b92915050565b600080604083850312156200016457620001636200010a565b5b6000620001748582860162000133565b9250506020620001878582860162000133565b9150509250929050565b600082825260208201905092915050565b7f7265736572766520707269636520697320686967686572207468616e2063757260008201527f72656e7420707269636500000000000000000000000000000000000000000000602082015250565b600062000200602a8362000191565b91506200020d82620001a2565b604082019050919050565b600060208201905081810360008301526200023381620001f1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c0516153ef62000309600039600081816104ce01528181610939015281816109c701528181610f78015281816110d0015281816111a2015281816114bc0152818161158e0152818161172d015281816117b3015281816117db01528181612224015281816122b40152818161234201526128f3015260008181610ffe0152818161168801526116b50152600061164701526153ef6000f3fe608060405260043610620001335760003560e01c80637494c87511620000af578063ca77ab65116200006d578063ca77ab65146200041e578063df3853061462000438578063e4655bca1462000468578063e47112bd1462000498578063fe67a54b14620004b25762000145565b80637494c875146200031c5780637ded653f1462000360578063aa9d9bd61462000390578063ac5ece6d14620003aa578063c6dda94514620003da5762000145565b80631f8cdb0411620000fd5780631f8cdb0414620001fb57806326f5102014620002075780633bc7682c146200024b5780634fee13fc146200028f5780636e3bc76b14620002d35762000145565b806308bfc30014620001515780630b324808146200018157806312210e8a14620001b157806314df33ac14620001cb5762000145565b36620001455762000143620004cc565b005b6200014f620004cc565b005b3480156200015e57600080fd5b50620001696200091e565b60405162000178919062002b36565b60405180910390f35b3480156200018e57600080fd5b506200019962000935565b604051620001a8919062002b6e565b60405180910390f35b348015620001be57600080fd5b50620001c9620009c5565b005b348015620001d857600080fd5b50620001e362000f74565b604051620001f2919062002ba6565b60405180910390f35b62000205620004cc565b005b3480156200021457600080fd5b506200023360048036038101906200022d919062002c2d565b62001022565b60405162000242919062002ba6565b60405180910390f35b3480156200025857600080fd5b5062000277600480360381019062000271919062002c2d565b620010cc565b60405162000286919062002ba6565b60405180910390f35b3480156200029c57600080fd5b50620002bb6004803603810190620002b5919062002c90565b6200119e565b604051620002ca919062002ce8565b60405180910390f35b348015620002e057600080fd5b50620002ff6004803603810190620002f9919062002c2d565b6200144f565b604051620003139695949392919062002d22565b60405180910390f35b3480156200032957600080fd5b5062000348600480360381019062000342919062002c2d565b620014b8565b60405162000357919062002ba6565b60405180910390f35b3480156200036d57600080fd5b50620003786200158a565b60405162000387919062002ba6565b60405180910390f35b3480156200039d57600080fd5b50620003a862001618565b005b348015620003b757600080fd5b50620003c262001729565b604051620003d1919062002ce8565b60405180910390f35b348015620003e757600080fd5b5062000406600480360381019062000400919062002c2d565b620017d7565b60405162000415919062002ba6565b60405180910390f35b3480156200042b57600080fd5b5062000436620018a9565b005b3480156200044557600080fd5b506200045062002220565b6040516200045f919062002ba6565b60405180910390f35b3480156200047557600080fd5b5062000480620022b0565b6040516200048f919062002ba6565b60405180910390f35b348015620004a557600080fd5b50620004b062002340565b005b348015620004bf57600080fd5b50620004ca620028f1565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160362000552576040517fc3fdc7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900460ff16600181111562000577576200057662002ab6565b5b6001808111156200058d576200058c62002ab6565b5b03620005c5576040517f5de7a96600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600034116200060b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006029062002df0565b60405180910390fd5b62000615620018a9565b6104b06004544262000628919062002e41565b106200066b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006629062002ecc565b60405180910390fd5b600060055411620006b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006aa9062002f3e565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16620008ba576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506002600081546200075c9062002f60565b9190508190558160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034816002018190555060018160050160006101000a81548160ff02191690831515021790555060008160030181905550600081600401819055506009339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6559452b5cf88e12990371c9441273d2dbb464fb7dd9cc4030551b86df924b6281600001548260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020154604051620008ab9392919062002fad565b60405180910390a1506200091c565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090503481600201600082825462000913919062002fea565b92505081905550505b565b6000600b60009054906101000a900460ff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620009bd576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a4b576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900460ff16600181111562000a705762000a6f62002ab6565b5b6000600181111562000a875762000a8662002ab6565b5b0362000abf576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60098054905081101562000f71576000600a60006009848154811062000aed5762000aec62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015411801562000be65750600a60006009838154811062000b7a5762000b7962003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015447115b1562000f5b576000600a60006009848154811062000c095762000c0862003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015490506000600a60006009858154811062000c915762000c9062003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055506000600a60006009858154811062000d1a5762000d1962003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405162000dc89062003089565b60006040518083038185875af1925050503d806000811462000e07576040519150601f19603f3d011682016040523d82523d6000602084013e62000e0c565b606091505b50509050600091508062000e57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e4e90620030f0565b60405180910390fd5b7fb24b09fd2e8e4d8904c3c26f3e935824e032891520ffda419dec9f086b0e1eea6009848154811062000e8f5762000e8e62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60006009878154811062000ed55762000ed462003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301548460405162000f509392919062003112565b60405180910390a150505b808062000f689062002f60565b91505062000ac2565b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000ffc576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040162001081919062002ce8565b602060405180830381865afa1580156200109f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010c5919062003166565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001154576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001226576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900460ff1660018111156200124b576200124a62002ab6565b5b6000600181111562001262576200126162002ab6565b5b036200129a576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b60006101000a81548160ff02191690836001811115620012c357620012c262002ab6565b5b021790555082600381905550816006819055504260048190555060035430604051620012ef9062002aa8565b620012fc92919062003198565b604051809103906000f08015801562001319573d6000803e3d6000fd5b50600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0f0eb7cc9cde5623ecdc8f18c7fe6bacab47ab80468f73b4d9b3d08ec7284af5600454600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546006546040516200141c9493929190620031c5565b60405180910390a1600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600a6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001540576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001612576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b600654603c600454426200162d919062002e41565b62001639919062003241565b62001645919062003279565b7f0000000000000000000000000000000000000000000000000000000000000000620016729190620032fd565b6001819055506000600154131580620016ad57507f000000000000000000000000000000000000000000000000000000000000000060015413155b15620016db577f00000000000000000000000000000000000000000000000000000000000000006001819055505b7f7cda8554820ef0a356899263aefa9db86ab6966b7b823eda047b78c3afdfeb8e600454426200170c919062002e41565b6001546040516200171f92919062003347565b60405180910390a1565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620017b1576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200185f576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b620018b362001618565b6000600354905060005b600980549050811015620021ce57600154600a600060098481548110620018e957620018e862003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546200195e919062003241565b821062001bb057600154600a60006009848154811062001983576200198262003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154620019f8919062003241565b600a60006009848154811062001a135762001a1262003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600154600a60006009848154811062001a9d5762001a9c62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015462001b12919062003241565b8262001b1f919062002e41565b91506000600a60006009848154811062001b3e5762001b3d62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555062002034565b60008211801562001c525750600154600a60006009848154811062001bda5762001bd962003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015462001c4f919062003241565b82105b1562001e945781600a60006009848154811062001c745762001c7362003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060009150600154600a60006009848154811062001d025762001d0162003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015462001d77919062003374565b600a60006009848154811062001d925762001d9162003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015462001e07919062002e41565b600a60006009848154811062001e225762001e2162003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555062002033565b6000821162002032576000600a60006009848154811062001eba5762001eb962003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600a60006009838154811062001f415762001f4062003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600a60006009848154811062001fc55762001fc462003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055505b5b5b7fb24b09fd2e8e4d8904c3c26f3e935824e032891520ffda419dec9f086b0e1eea600982815481106200206c576200206b62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600060098581548110620020b257620020b162003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600a60006009868154811062002136576200213562003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154604051620021b09392919062003112565b60405180910390a18080620021c59062002f60565b915050620018bd565b506000811115620021e657806005819055506200221d565b6001600b60006101000a81548160ff021916908360018111156200220f576200220e62002ab6565b5b021790555060006005819055505b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620022a8576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600354905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002338576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620023c6576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900460ff166001811115620023eb57620023ea62002ab6565b5b6000600181111562002402576200240162002ab6565b5b036200243a576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600980549050811015620028ee576000600a60006009848154811062002468576200246762003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541115620028d857600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600983815481106200252d576200252c62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a7640000600a6000600987815481106200257c576200257b62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154620025f1919062003374565b6040518363ffffffff1660e01b815260040162002610929190620033bf565b6020604051808303816000875af115801562002630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200265691906200341d565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3060098481548110620026ad57620026ac62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a7640000600a600060098881548110620026fc57620026fb62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015462002771919062003374565b6040518463ffffffff1660e01b815260040162002791939291906200344f565b6020604051808303816000875af1158015620027b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027d791906200341d565b507f039b13884cbcea684931b2bcff6faab7170693e1bc173e651e14168c890c70806009828154811062002810576200280f62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60006009858154811062002856576200285562003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154604051620028cf929190620033bf565b60405180910390a15b8080620028e59062002f60565b9150506200243d565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002977576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600b60006101000a81548160ff02191690836001811115620029a0576200299f62002ab6565b5b0217905550620029af620018a9565b620029b962002340565b620029c3620009c5565b6000600554111562002a6557600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac306005546040518363ffffffff1660e01b815260040162002a30929190620033bf565b600060405180830381600087803b15801562002a4b57600080fd5b505af115801562002a60573d6000803e3d6000fd5b505050505b7f99d9aed25b1415a4a35a1890d2ee6aa1db28f98ba8eff1de3d494a6af9dca7726002546005544760405162002a9e939291906200348c565b60405180910390a1565b611ef080620034ca83390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811062002af95762002af862002ab6565b5b50565b600081905062002b0c8262002ae5565b919050565b600062002b1e8262002afc565b9050919050565b62002b308162002b11565b82525050565b600060208201905062002b4d600083018462002b25565b92915050565b6000819050919050565b62002b688162002b53565b82525050565b600060208201905062002b85600083018462002b5d565b92915050565b6000819050919050565b62002ba08162002b8b565b82525050565b600060208201905062002bbd600083018462002b95565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062002bf58262002bc8565b9050919050565b62002c078162002be8565b811462002c1357600080fd5b50565b60008135905062002c278162002bfc565b92915050565b60006020828403121562002c465762002c4562002bc3565b5b600062002c568482850162002c16565b91505092915050565b62002c6a8162002b8b565b811462002c7657600080fd5b50565b60008135905062002c8a8162002c5f565b92915050565b6000806040838503121562002caa5762002ca962002bc3565b5b600062002cba8582860162002c79565b925050602062002ccd8582860162002c79565b9150509250929050565b62002ce28162002be8565b82525050565b600060208201905062002cff600083018462002cd7565b92915050565b60008115159050919050565b62002d1c8162002d05565b82525050565b600060c08201905062002d39600083018962002b95565b62002d48602083018862002cd7565b62002d57604083018762002b95565b62002d66606083018662002b95565b62002d75608083018562002b95565b62002d8460a083018462002d11565b979650505050505050565b600082825260208201905092915050565b7f62696456616c7565206c657373207468616e2030000000000000000000000000600082015250565b600062002dd860148362002d8f565b915062002de58262002da0565b602082019050919050565b6000602082019050818103600083015262002e0b8162002dc9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062002e4e8262002b8b565b915062002e5b8362002b8b565b925082820390508181111562002e765762002e7562002e12565b5b92915050565b7f74696d6520697320757000000000000000000000000000000000000000000000600082015250565b600062002eb4600a8362002d8f565b915062002ec18262002e7c565b602082019050919050565b6000602082019050818103600083015262002ee78162002ea5565b9050919050565b7f5468657265206973206e6f206d6f726520616c676f73206c6566740000000000600082015250565b600062002f26601b8362002d8f565b915062002f338262002eee565b602082019050919050565b6000602082019050818103600083015262002f598162002f17565b9050919050565b600062002f6d8262002b8b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362002fa25762002fa162002e12565b5b600182019050919050565b600060608201905062002fc4600083018662002b95565b62002fd3602083018562002cd7565b62002fe2604083018462002b95565b949350505050565b600062002ff78262002b8b565b9150620030048362002b8b565b92508282019050808211156200301f576200301e62002e12565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b60006200307160008362003054565b91506200307e826200305f565b600082019050919050565b6000620030968262003062565b9150819050919050565b7f4661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000620030d860148362002d8f565b9150620030e582620030a0565b602082019050919050565b600060208201905081810360008301526200310b81620030c9565b9050919050565b600060608201905062003129600083018662002cd7565b62003138602083018562002b95565b62003147604083018462002b95565b949350505050565b600081519050620031608162002c5f565b92915050565b6000602082840312156200317f576200317e62002bc3565b5b60006200318f848285016200314f565b91505092915050565b6000604082019050620031af600083018562002b95565b620031be602083018462002cd7565b9392505050565b6000608082019050620031dc600083018762002b95565b620031eb602083018662002cd7565b620031fa604083018562002b95565b62003209606083018462002b95565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200324e8262002b8b565b91506200325b8362002b8b565b9250826200326e576200326d62003212565b5b828204905092915050565b6000620032868262002b53565b9150620032938362002b53565b9250828202620032a38162002b53565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615620032de57620032dd62002e12565b5b8282058414831517620032f657620032f562002e12565b5b5092915050565b60006200330a8262002b53565b9150620033178362002b53565b925082820390508181126000841216828213600085121516171562003341576200334062002e12565b5b92915050565b60006040820190506200335e600083018562002b95565b6200336d602083018462002b95565b9392505050565b6000620033818262002b8b565b91506200338e8362002b8b565b92508282026200339e8162002b8b565b91508282048414831517620033b857620033b762002e12565b5b5092915050565b6000604082019050620033d6600083018562002cd7565b620033e5602083018462002b95565b9392505050565b620033f78162002d05565b81146200340357600080fd5b50565b6000815190506200341781620033ec565b92915050565b60006020828403121562003436576200343562002bc3565b5b6000620034468482850162003406565b91505092915050565b600060608201905062003466600083018662002cd7565b62003475602083018562002cd7565b62003484604083018462002b95565b949350505050565b6000606082019050620034a3600083018662002b95565b620034b2602083018562002b95565b620034c1604083018462002b95565b94935050505056fe60806040523480156200001157600080fd5b5060405162001ef038038062001ef0833981810160405281019062000037919062000805565b336040518060400160405280600a81526020017f4552433230546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f45540000000000000000000000000000000000000000000000000000000000008152508160039081620000b5919062000abc565b508060049081620000c7919062000abc565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013f5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000136919062000bb4565b60405180910390fd5b6200015081620001a860201b60201c565b506200017833670de0b6b3a7640000846200016c919062000c00565b6200026e60201b60201c565b6200019f81670de0b6b3a76400008462000193919062000c00565b620002fb60201b60201c565b50505062000cf1565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620002e35760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401620002da919062000bb4565b60405180910390fd5b620002f7600083836200032e60201b60201c565b5050565b6000806200030e6200055e60201b60201c565b9050620003238185856200056660201b60201c565b600191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200038457806002600082825462000377919062000c4b565b925050819055506200045a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562000413578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016200040a9392919062000c97565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620004a55780600260008282540392505081905550620004f2565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000551919062000cd4565b60405180910390a3505050565b600033905090565b6200057b83838360016200058060201b60201c565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603620005f55760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401620005ec919062000bb4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200066a5760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040162000661919062000bb4565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156200075a578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405162000751919062000cd4565b60405180910390a35b50505050565b600080fd5b6000819050919050565b6200077a8162000765565b81146200078657600080fd5b50565b6000815190506200079a816200076f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620007cd82620007a0565b9050919050565b620007df81620007c0565b8114620007eb57600080fd5b50565b600081519050620007ff81620007d4565b92915050565b600080604083850312156200081f576200081e62000760565b5b60006200082f8582860162000789565b92505060206200084285828601620007ee565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620008ce57607f821691505b602082108103620008e457620008e362000886565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200094e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200090f565b6200095a86836200090f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200099d62000997620009918462000765565b62000972565b62000765565b9050919050565b6000819050919050565b620009b9836200097c565b620009d1620009c882620009a4565b8484546200091c565b825550505050565b600090565b620009e8620009d9565b620009f5818484620009ae565b505050565b5b8181101562000a1d5762000a11600082620009de565b600181019050620009fb565b5050565b601f82111562000a6c5762000a3681620008ea565b62000a4184620008ff565b8101602085101562000a51578190505b62000a6962000a6085620008ff565b830182620009fa565b50505b505050565b600082821c905092915050565b600062000a916000198460080262000a71565b1980831691505092915050565b600062000aac838362000a7e565b9150826002028217905092915050565b62000ac7826200084c565b67ffffffffffffffff81111562000ae35762000ae262000857565b5b62000aef8254620008b5565b62000afc82828562000a21565b600060209050601f83116001811462000b34576000841562000b1f578287015190505b62000b2b858262000a9e565b86555062000b9b565b601f19841662000b4486620008ea565b60005b8281101562000b6e5784890151825560018201915060208501945060208101905062000b47565b8683101562000b8e578489015162000b8a601f89168262000a7e565b8355505b6001600288020188555050505b505050505050565b62000bae81620007c0565b82525050565b600060208201905062000bcb600083018462000ba3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000c0d8262000765565b915062000c1a8362000765565b925082820262000c2a8162000765565b9150828204841483151762000c445762000c4362000bd1565b5b5092915050565b600062000c588262000765565b915062000c658362000765565b925082820190508082111562000c805762000c7f62000bd1565b5b92915050565b62000c918162000765565b82525050565b600060608201905062000cae600083018662000ba3565b62000cbd602083018562000c86565b62000ccc604083018462000c86565b949350505050565b600060208201905062000ceb600083018462000c86565b92915050565b6111ef8062000d016000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c5780639dc29fac116100665780639dc29fac14610204578063a9059cbb14610220578063dd62ed3e14610250578063f2fde38b14610280576100cf565b8063715018a6146101be5780638da5cb5b146101c857806395d89b41146101e6576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806370a082311461018e575b600080fd5b6100dc61029c565b6040516100e99190610e01565b60405180910390f35b61010c60048036038101906101079190610ebc565b61032e565b6040516101199190610f17565b60405180910390f35b61012a610351565b6040516101379190610f41565b60405180910390f35b61015a60048036038101906101559190610f5c565b61035b565b6040516101679190610f17565b60405180910390f35b61017861038a565b6040516101859190610fcb565b60405180910390f35b6101a860048036038101906101a39190610fe6565b610393565b6040516101b59190610f41565b60405180910390f35b6101c66103db565b005b6101d06103ef565b6040516101dd9190611022565b60405180910390f35b6101ee610419565b6040516101fb9190610e01565b60405180910390f35b61021e60048036038101906102199190610ebc565b6104ab565b005b61023a60048036038101906102359190610ebc565b6104d4565b6040516102479190610f17565b60405180910390f35b61026a6004803603810190610265919061103d565b6104f7565b6040516102779190610f41565b60405180910390f35b61029a60048036038101906102959190610fe6565b61057e565b005b6060600380546102ab906110ac565b80601f01602080910402602001604051908101604052809291908181526020018280546102d7906110ac565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b5050505050905090565b600080610339610604565b905061034681858561060c565b600191505092915050565b6000600254905090565b600080610366610604565b905061037385828561061e565b61037e8585856106b2565b60019150509392505050565b60006012905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103e36107a6565b6103ed600061082d565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610428906110ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610454906110ac565b80156104a15780601f10610476576101008083540402835291602001916104a1565b820191906000526020600020905b81548152906001019060200180831161048457829003601f168201915b5050505050905090565b6104b36107a6565b6104d082670de0b6b3a7640000836104cb919061110c565b6108f3565b5050565b6000806104df610604565b90506104ec8185856106b2565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6105866107a6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105f85760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105ef9190611022565b60405180910390fd5b6106018161082d565b50565b600033905090565b6106198383836001610975565b505050565b600061062a84846104f7565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106ac578181101561069c578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016106939392919061114e565b60405180910390fd5b6106ab84848484036000610975565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107245760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161071b9190611022565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107965760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161078d9190611022565b60405180910390fd5b6107a1838383610b4c565b505050565b6107ae610604565b73ffffffffffffffffffffffffffffffffffffffff166107cc6103ef565b73ffffffffffffffffffffffffffffffffffffffff161461082b576107ef610604565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108229190611022565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109655760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161095c9190611022565b60405180910390fd5b61097182600083610b4c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109e75760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016109de9190611022565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a595760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a509190611022565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b46578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b3d9190610f41565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b9e578060026000828254610b929190611185565b92505081905550610c71565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c2a578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c219392919061114e565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cba5780600260008282540392505081905550610d07565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d649190610f41565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dab578082015181840152602081019050610d90565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dd382610d71565b610ddd8185610d7c565b9350610ded818560208601610d8d565b610df681610db7565b840191505092915050565b60006020820190508181036000830152610e1b8184610dc8565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5382610e28565b9050919050565b610e6381610e48565b8114610e6e57600080fd5b50565b600081359050610e8081610e5a565b92915050565b6000819050919050565b610e9981610e86565b8114610ea457600080fd5b50565b600081359050610eb681610e90565b92915050565b60008060408385031215610ed357610ed2610e23565b5b6000610ee185828601610e71565b9250506020610ef285828601610ea7565b9150509250929050565b60008115159050919050565b610f1181610efc565b82525050565b6000602082019050610f2c6000830184610f08565b92915050565b610f3b81610e86565b82525050565b6000602082019050610f566000830184610f32565b92915050565b600080600060608486031215610f7557610f74610e23565b5b6000610f8386828701610e71565b9350506020610f9486828701610e71565b9250506040610fa586828701610ea7565b9150509250925092565b600060ff82169050919050565b610fc581610faf565b82525050565b6000602082019050610fe06000830184610fbc565b92915050565b600060208284031215610ffc57610ffb610e23565b5b600061100a84828501610e71565b91505092915050565b61101c81610e48565b82525050565b60006020820190506110376000830184611013565b92915050565b6000806040838503121561105457611053610e23565b5b600061106285828601610e71565b925050602061107385828601610e71565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110c457607f821691505b6020821081036110d7576110d661107d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061111782610e86565b915061112283610e86565b925082820261113081610e86565b91508282048414831517611147576111466110dd565b5b5092915050565b60006060820190506111636000830186611013565b6111706020830185610f32565b61117d6040830184610f32565b949350505050565b600061119082610e86565b915061119b83610e86565b92508282019050808211156111b3576111b26110dd565b5b9291505056fea264697066735822122079f598f0a8dacb1d30afd8c8ba7daffb32791f9bfdbb18ce2f4ccb11951c7dea64736f6c63430008150033a2646970667358221220a178ecf47051f315b56018227e6e679667f10df0be428a50d9000b8b6e1a2eae64736f6c63430008150033",
  "deployedBytecode": "0x608060405260043610620001335760003560e01c80637494c87511620000af578063ca77ab65116200006d578063ca77ab65146200041e578063df3853061462000438578063e4655bca1462000468578063e47112bd1462000498578063fe67a54b14620004b25762000145565b80637494c875146200031c5780637ded653f1462000360578063aa9d9bd61462000390578063ac5ece6d14620003aa578063c6dda94514620003da5762000145565b80631f8cdb0411620000fd5780631f8cdb0414620001fb57806326f5102014620002075780633bc7682c146200024b5780634fee13fc146200028f5780636e3bc76b14620002d35762000145565b806308bfc30014620001515780630b324808146200018157806312210e8a14620001b157806314df33ac14620001cb5762000145565b36620001455762000143620004cc565b005b6200014f620004cc565b005b3480156200015e57600080fd5b50620001696200091e565b60405162000178919062002b36565b60405180910390f35b3480156200018e57600080fd5b506200019962000935565b604051620001a8919062002b6e565b60405180910390f35b348015620001be57600080fd5b50620001c9620009c5565b005b348015620001d857600080fd5b50620001e362000f74565b604051620001f2919062002ba6565b60405180910390f35b62000205620004cc565b005b3480156200021457600080fd5b506200023360048036038101906200022d919062002c2d565b62001022565b60405162000242919062002ba6565b60405180910390f35b3480156200025857600080fd5b5062000277600480360381019062000271919062002c2d565b620010cc565b60405162000286919062002ba6565b60405180910390f35b3480156200029c57600080fd5b50620002bb6004803603810190620002b5919062002c90565b6200119e565b604051620002ca919062002ce8565b60405180910390f35b348015620002e057600080fd5b50620002ff6004803603810190620002f9919062002c2d565b6200144f565b604051620003139695949392919062002d22565b60405180910390f35b3480156200032957600080fd5b5062000348600480360381019062000342919062002c2d565b620014b8565b60405162000357919062002ba6565b60405180910390f35b3480156200036d57600080fd5b50620003786200158a565b60405162000387919062002ba6565b60405180910390f35b3480156200039d57600080fd5b50620003a862001618565b005b348015620003b757600080fd5b50620003c262001729565b604051620003d1919062002ce8565b60405180910390f35b348015620003e757600080fd5b5062000406600480360381019062000400919062002c2d565b620017d7565b60405162000415919062002ba6565b60405180910390f35b3480156200042b57600080fd5b5062000436620018a9565b005b3480156200044557600080fd5b506200045062002220565b6040516200045f919062002ba6565b60405180910390f35b3480156200047557600080fd5b5062000480620022b0565b6040516200048f919062002ba6565b60405180910390f35b348015620004a557600080fd5b50620004b062002340565b005b348015620004bf57600080fd5b50620004ca620028f1565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160362000552576040517fc3fdc7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900460ff16600181111562000577576200057662002ab6565b5b6001808111156200058d576200058c62002ab6565b5b03620005c5576040517f5de7a96600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600034116200060b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006029062002df0565b60405180910390fd5b62000615620018a9565b6104b06004544262000628919062002e41565b106200066b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006629062002ecc565b60405180910390fd5b600060055411620006b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006aa9062002f3e565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16620008ba576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506002600081546200075c9062002f60565b9190508190558160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034816002018190555060018160050160006101000a81548160ff02191690831515021790555060008160030181905550600081600401819055506009339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6559452b5cf88e12990371c9441273d2dbb464fb7dd9cc4030551b86df924b6281600001548260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020154604051620008ab9392919062002fad565b60405180910390a1506200091c565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090503481600201600082825462000913919062002fea565b92505081905550505b565b6000600b60009054906101000a900460ff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620009bd576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a4b576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900460ff16600181111562000a705762000a6f62002ab6565b5b6000600181111562000a875762000a8662002ab6565b5b0362000abf576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60098054905081101562000f71576000600a60006009848154811062000aed5762000aec62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015411801562000be65750600a60006009838154811062000b7a5762000b7962003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015447115b1562000f5b576000600a60006009848154811062000c095762000c0862003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015490506000600a60006009858154811062000c915762000c9062003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055506000600a60006009858154811062000d1a5762000d1962003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405162000dc89062003089565b60006040518083038185875af1925050503d806000811462000e07576040519150601f19603f3d011682016040523d82523d6000602084013e62000e0c565b606091505b50509050600091508062000e57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e4e90620030f0565b60405180910390fd5b7fb24b09fd2e8e4d8904c3c26f3e935824e032891520ffda419dec9f086b0e1eea6009848154811062000e8f5762000e8e62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60006009878154811062000ed55762000ed462003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301548460405162000f509392919062003112565b60405180910390a150505b808062000f689062002f60565b91505062000ac2565b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000ffc576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040162001081919062002ce8565b602060405180830381865afa1580156200109f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010c5919062003166565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001154576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001226576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900460ff1660018111156200124b576200124a62002ab6565b5b6000600181111562001262576200126162002ab6565b5b036200129a576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b60006101000a81548160ff02191690836001811115620012c357620012c262002ab6565b5b021790555082600381905550816006819055504260048190555060035430604051620012ef9062002aa8565b620012fc92919062003198565b604051809103906000f08015801562001319573d6000803e3d6000fd5b50600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0f0eb7cc9cde5623ecdc8f18c7fe6bacab47ab80468f73b4d9b3d08ec7284af5600454600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546006546040516200141c9493929190620031c5565b60405180910390a1600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600a6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001540576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001612576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b600654603c600454426200162d919062002e41565b62001639919062003241565b62001645919062003279565b7f0000000000000000000000000000000000000000000000000000000000000000620016729190620032fd565b6001819055506000600154131580620016ad57507f000000000000000000000000000000000000000000000000000000000000000060015413155b15620016db577f00000000000000000000000000000000000000000000000000000000000000006001819055505b7f7cda8554820ef0a356899263aefa9db86ab6966b7b823eda047b78c3afdfeb8e600454426200170c919062002e41565b6001546040516200171f92919062003347565b60405180910390a1565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620017b1576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200185f576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b620018b362001618565b6000600354905060005b600980549050811015620021ce57600154600a600060098481548110620018e957620018e862003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546200195e919062003241565b821062001bb057600154600a60006009848154811062001983576200198262003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154620019f8919062003241565b600a60006009848154811062001a135762001a1262003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600154600a60006009848154811062001a9d5762001a9c62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015462001b12919062003241565b8262001b1f919062002e41565b91506000600a60006009848154811062001b3e5762001b3d62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555062002034565b60008211801562001c525750600154600a60006009848154811062001bda5762001bd962003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015462001c4f919062003241565b82105b1562001e945781600a60006009848154811062001c745762001c7362003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060009150600154600a60006009848154811062001d025762001d0162003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015462001d77919062003374565b600a60006009848154811062001d925762001d9162003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015462001e07919062002e41565b600a60006009848154811062001e225762001e2162003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555062002033565b6000821162002032576000600a60006009848154811062001eba5762001eb962003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550600a60006009838154811062001f415762001f4062003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600a60006009848154811062001fc55762001fc462003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055505b5b5b7fb24b09fd2e8e4d8904c3c26f3e935824e032891520ffda419dec9f086b0e1eea600982815481106200206c576200206b62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600060098581548110620020b257620020b162003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600a60006009868154811062002136576200213562003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154604051620021b09392919062003112565b60405180910390a18080620021c59062002f60565b915050620018bd565b506000811115620021e657806005819055506200221d565b6001600b60006101000a81548160ff021916908360018111156200220f576200220e62002ab6565b5b021790555060006005819055505b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620022a8576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600354905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002338576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620023c6576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900460ff166001811115620023eb57620023ea62002ab6565b5b6000600181111562002402576200240162002ab6565b5b036200243a576040517f6668065e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600980549050811015620028ee576000600a60006009848154811062002468576200246762003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541115620028d857600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600983815481106200252d576200252c62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a7640000600a6000600987815481106200257c576200257b62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154620025f1919062003374565b6040518363ffffffff1660e01b815260040162002610929190620033bf565b6020604051808303816000875af115801562002630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200265691906200341d565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3060098481548110620026ad57620026ac62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a7640000600a600060098881548110620026fc57620026fb62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015462002771919062003374565b6040518463ffffffff1660e01b815260040162002791939291906200344f565b6020604051808303816000875af1158015620027b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027d791906200341d565b507f039b13884cbcea684931b2bcff6faab7170693e1bc173e651e14168c890c70806009828154811062002810576200280f62003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60006009858154811062002856576200285562003025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154604051620028cf929190620033bf565b60405180910390a15b8080620028e59062002f60565b9150506200243d565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002977576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600b60006101000a81548160ff02191690836001811115620029a0576200299f62002ab6565b5b0217905550620029af620018a9565b620029b962002340565b620029c3620009c5565b6000600554111562002a6557600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac306005546040518363ffffffff1660e01b815260040162002a30929190620033bf565b600060405180830381600087803b15801562002a4b57600080fd5b505af115801562002a60573d6000803e3d6000fd5b505050505b7f99d9aed25b1415a4a35a1890d2ee6aa1db28f98ba8eff1de3d494a6af9dca7726002546005544760405162002a9e939291906200348c565b60405180910390a1565b611ef080620034ca83390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811062002af95762002af862002ab6565b5b50565b600081905062002b0c8262002ae5565b919050565b600062002b1e8262002afc565b9050919050565b62002b308162002b11565b82525050565b600060208201905062002b4d600083018462002b25565b92915050565b6000819050919050565b62002b688162002b53565b82525050565b600060208201905062002b85600083018462002b5d565b92915050565b6000819050919050565b62002ba08162002b8b565b82525050565b600060208201905062002bbd600083018462002b95565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062002bf58262002bc8565b9050919050565b62002c078162002be8565b811462002c1357600080fd5b50565b60008135905062002c278162002bfc565b92915050565b60006020828403121562002c465762002c4562002bc3565b5b600062002c568482850162002c16565b91505092915050565b62002c6a8162002b8b565b811462002c7657600080fd5b50565b60008135905062002c8a8162002c5f565b92915050565b6000806040838503121562002caa5762002ca962002bc3565b5b600062002cba8582860162002c79565b925050602062002ccd8582860162002c79565b9150509250929050565b62002ce28162002be8565b82525050565b600060208201905062002cff600083018462002cd7565b92915050565b60008115159050919050565b62002d1c8162002d05565b82525050565b600060c08201905062002d39600083018962002b95565b62002d48602083018862002cd7565b62002d57604083018762002b95565b62002d66606083018662002b95565b62002d75608083018562002b95565b62002d8460a083018462002d11565b979650505050505050565b600082825260208201905092915050565b7f62696456616c7565206c657373207468616e2030000000000000000000000000600082015250565b600062002dd860148362002d8f565b915062002de58262002da0565b602082019050919050565b6000602082019050818103600083015262002e0b8162002dc9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062002e4e8262002b8b565b915062002e5b8362002b8b565b925082820390508181111562002e765762002e7562002e12565b5b92915050565b7f74696d6520697320757000000000000000000000000000000000000000000000600082015250565b600062002eb4600a8362002d8f565b915062002ec18262002e7c565b602082019050919050565b6000602082019050818103600083015262002ee78162002ea5565b9050919050565b7f5468657265206973206e6f206d6f726520616c676f73206c6566740000000000600082015250565b600062002f26601b8362002d8f565b915062002f338262002eee565b602082019050919050565b6000602082019050818103600083015262002f598162002f17565b9050919050565b600062002f6d8262002b8b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362002fa25762002fa162002e12565b5b600182019050919050565b600060608201905062002fc4600083018662002b95565b62002fd3602083018562002cd7565b62002fe2604083018462002b95565b949350505050565b600062002ff78262002b8b565b9150620030048362002b8b565b92508282019050808211156200301f576200301e62002e12565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b60006200307160008362003054565b91506200307e826200305f565b600082019050919050565b6000620030968262003062565b9150819050919050565b7f4661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000620030d860148362002d8f565b9150620030e582620030a0565b602082019050919050565b600060208201905081810360008301526200310b81620030c9565b9050919050565b600060608201905062003129600083018662002cd7565b62003138602083018562002b95565b62003147604083018462002b95565b949350505050565b600081519050620031608162002c5f565b92915050565b6000602082840312156200317f576200317e62002bc3565b5b60006200318f848285016200314f565b91505092915050565b6000604082019050620031af600083018562002b95565b620031be602083018462002cd7565b9392505050565b6000608082019050620031dc600083018762002b95565b620031eb602083018662002cd7565b620031fa604083018562002b95565b62003209606083018462002b95565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200324e8262002b8b565b91506200325b8362002b8b565b9250826200326e576200326d62003212565b5b828204905092915050565b6000620032868262002b53565b9150620032938362002b53565b9250828202620032a38162002b53565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615620032de57620032dd62002e12565b5b8282058414831517620032f657620032f562002e12565b5b5092915050565b60006200330a8262002b53565b9150620033178362002b53565b925082820390508181126000841216828213600085121516171562003341576200334062002e12565b5b92915050565b60006040820190506200335e600083018562002b95565b6200336d602083018462002b95565b9392505050565b6000620033818262002b8b565b91506200338e8362002b8b565b92508282026200339e8162002b8b565b91508282048414831517620033b857620033b762002e12565b5b5092915050565b6000604082019050620033d6600083018562002cd7565b620033e5602083018462002b95565b9392505050565b620033f78162002d05565b81146200340357600080fd5b50565b6000815190506200341781620033ec565b92915050565b60006020828403121562003436576200343562002bc3565b5b6000620034468482850162003406565b91505092915050565b600060608201905062003466600083018662002cd7565b62003475602083018562002cd7565b62003484604083018462002b95565b949350505050565b6000606082019050620034a3600083018662002b95565b620034b2602083018562002b95565b620034c1604083018462002b95565b94935050505056fe60806040523480156200001157600080fd5b5060405162001ef038038062001ef0833981810160405281019062000037919062000805565b336040518060400160405280600a81526020017f4552433230546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f45540000000000000000000000000000000000000000000000000000000000008152508160039081620000b5919062000abc565b508060049081620000c7919062000abc565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013f5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000136919062000bb4565b60405180910390fd5b6200015081620001a860201b60201c565b506200017833670de0b6b3a7640000846200016c919062000c00565b6200026e60201b60201c565b6200019f81670de0b6b3a76400008462000193919062000c00565b620002fb60201b60201c565b50505062000cf1565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620002e35760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401620002da919062000bb4565b60405180910390fd5b620002f7600083836200032e60201b60201c565b5050565b6000806200030e6200055e60201b60201c565b9050620003238185856200056660201b60201c565b600191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200038457806002600082825462000377919062000c4b565b925050819055506200045a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562000413578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016200040a9392919062000c97565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620004a55780600260008282540392505081905550620004f2565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000551919062000cd4565b60405180910390a3505050565b600033905090565b6200057b83838360016200058060201b60201c565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603620005f55760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401620005ec919062000bb4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200066a5760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040162000661919062000bb4565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156200075a578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405162000751919062000cd4565b60405180910390a35b50505050565b600080fd5b6000819050919050565b6200077a8162000765565b81146200078657600080fd5b50565b6000815190506200079a816200076f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620007cd82620007a0565b9050919050565b620007df81620007c0565b8114620007eb57600080fd5b50565b600081519050620007ff81620007d4565b92915050565b600080604083850312156200081f576200081e62000760565b5b60006200082f8582860162000789565b92505060206200084285828601620007ee565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620008ce57607f821691505b602082108103620008e457620008e362000886565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200094e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200090f565b6200095a86836200090f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200099d62000997620009918462000765565b62000972565b62000765565b9050919050565b6000819050919050565b620009b9836200097c565b620009d1620009c882620009a4565b8484546200091c565b825550505050565b600090565b620009e8620009d9565b620009f5818484620009ae565b505050565b5b8181101562000a1d5762000a11600082620009de565b600181019050620009fb565b5050565b601f82111562000a6c5762000a3681620008ea565b62000a4184620008ff565b8101602085101562000a51578190505b62000a6962000a6085620008ff565b830182620009fa565b50505b505050565b600082821c905092915050565b600062000a916000198460080262000a71565b1980831691505092915050565b600062000aac838362000a7e565b9150826002028217905092915050565b62000ac7826200084c565b67ffffffffffffffff81111562000ae35762000ae262000857565b5b62000aef8254620008b5565b62000afc82828562000a21565b600060209050601f83116001811462000b34576000841562000b1f578287015190505b62000b2b858262000a9e565b86555062000b9b565b601f19841662000b4486620008ea565b60005b8281101562000b6e5784890151825560018201915060208501945060208101905062000b47565b8683101562000b8e578489015162000b8a601f89168262000a7e565b8355505b6001600288020188555050505b505050505050565b62000bae81620007c0565b82525050565b600060208201905062000bcb600083018462000ba3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000c0d8262000765565b915062000c1a8362000765565b925082820262000c2a8162000765565b9150828204841483151762000c445762000c4362000bd1565b5b5092915050565b600062000c588262000765565b915062000c658362000765565b925082820190508082111562000c805762000c7f62000bd1565b5b92915050565b62000c918162000765565b82525050565b600060608201905062000cae600083018662000ba3565b62000cbd602083018562000c86565b62000ccc604083018462000c86565b949350505050565b600060208201905062000ceb600083018462000c86565b92915050565b6111ef8062000d016000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c5780639dc29fac116100665780639dc29fac14610204578063a9059cbb14610220578063dd62ed3e14610250578063f2fde38b14610280576100cf565b8063715018a6146101be5780638da5cb5b146101c857806395d89b41146101e6576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806370a082311461018e575b600080fd5b6100dc61029c565b6040516100e99190610e01565b60405180910390f35b61010c60048036038101906101079190610ebc565b61032e565b6040516101199190610f17565b60405180910390f35b61012a610351565b6040516101379190610f41565b60405180910390f35b61015a60048036038101906101559190610f5c565b61035b565b6040516101679190610f17565b60405180910390f35b61017861038a565b6040516101859190610fcb565b60405180910390f35b6101a860048036038101906101a39190610fe6565b610393565b6040516101b59190610f41565b60405180910390f35b6101c66103db565b005b6101d06103ef565b6040516101dd9190611022565b60405180910390f35b6101ee610419565b6040516101fb9190610e01565b60405180910390f35b61021e60048036038101906102199190610ebc565b6104ab565b005b61023a60048036038101906102359190610ebc565b6104d4565b6040516102479190610f17565b60405180910390f35b61026a6004803603810190610265919061103d565b6104f7565b6040516102779190610f41565b60405180910390f35b61029a60048036038101906102959190610fe6565b61057e565b005b6060600380546102ab906110ac565b80601f01602080910402602001604051908101604052809291908181526020018280546102d7906110ac565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b5050505050905090565b600080610339610604565b905061034681858561060c565b600191505092915050565b6000600254905090565b600080610366610604565b905061037385828561061e565b61037e8585856106b2565b60019150509392505050565b60006012905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103e36107a6565b6103ed600061082d565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610428906110ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610454906110ac565b80156104a15780601f10610476576101008083540402835291602001916104a1565b820191906000526020600020905b81548152906001019060200180831161048457829003601f168201915b5050505050905090565b6104b36107a6565b6104d082670de0b6b3a7640000836104cb919061110c565b6108f3565b5050565b6000806104df610604565b90506104ec8185856106b2565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6105866107a6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105f85760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105ef9190611022565b60405180910390fd5b6106018161082d565b50565b600033905090565b6106198383836001610975565b505050565b600061062a84846104f7565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106ac578181101561069c578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016106939392919061114e565b60405180910390fd5b6106ab84848484036000610975565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107245760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161071b9190611022565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107965760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161078d9190611022565b60405180910390fd5b6107a1838383610b4c565b505050565b6107ae610604565b73ffffffffffffffffffffffffffffffffffffffff166107cc6103ef565b73ffffffffffffffffffffffffffffffffffffffff161461082b576107ef610604565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108229190611022565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109655760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161095c9190611022565b60405180910390fd5b61097182600083610b4c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109e75760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016109de9190611022565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a595760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a509190611022565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b46578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b3d9190610f41565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b9e578060026000828254610b929190611185565b92505081905550610c71565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c2a578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c219392919061114e565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cba5780600260008282540392505081905550610d07565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d649190610f41565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dab578082015181840152602081019050610d90565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dd382610d71565b610ddd8185610d7c565b9350610ded818560208601610d8d565b610df681610db7565b840191505092915050565b60006020820190508181036000830152610e1b8184610dc8565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5382610e28565b9050919050565b610e6381610e48565b8114610e6e57600080fd5b50565b600081359050610e8081610e5a565b92915050565b6000819050919050565b610e9981610e86565b8114610ea457600080fd5b50565b600081359050610eb681610e90565b92915050565b60008060408385031215610ed357610ed2610e23565b5b6000610ee185828601610e71565b9250506020610ef285828601610ea7565b9150509250929050565b60008115159050919050565b610f1181610efc565b82525050565b6000602082019050610f2c6000830184610f08565b92915050565b610f3b81610e86565b82525050565b6000602082019050610f566000830184610f32565b92915050565b600080600060608486031215610f7557610f74610e23565b5b6000610f8386828701610e71565b9350506020610f9486828701610e71565b9250506040610fa586828701610ea7565b9150509250925092565b600060ff82169050919050565b610fc581610faf565b82525050565b6000602082019050610fe06000830184610fbc565b92915050565b600060208284031215610ffc57610ffb610e23565b5b600061100a84828501610e71565b91505092915050565b61101c81610e48565b82525050565b60006020820190506110376000830184611013565b92915050565b6000806040838503121561105457611053610e23565b5b600061106285828601610e71565b925050602061107385828601610e71565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110c457607f821691505b6020821081036110d7576110d661107d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061111782610e86565b915061112283610e86565b925082820261113081610e86565b91508282048414831517611147576111466110dd565b5b5092915050565b60006060820190506111636000830186611013565b6111706020830185610f32565b61117d6040830184610f32565b949350505050565b600061119082610e86565b915061119b83610e86565b92508282019050808211156111b3576111b26110dd565b5b9291505056fea264697066735822122079f598f0a8dacb1d30afd8c8ba7daffb32791f9bfdbb18ce2f4ccb11951c7dea64736f6c63430008150033a2646970667358221220a178ecf47051f315b56018227e6e679667f10df0be428a50d9000b8b6e1a2eae64736f6c63430008150033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "startAuctionEvent(uint256,address,uint256,uint256)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "addBidder()": {
        "notice": "public functions "
      },
      "retrieveTotalAlgos()": {
        "notice": "View and Pure Function "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 936,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1010,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "currentPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 1013,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "totalNumBidders",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1021,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "totalAlgosAvailable",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1023,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "startTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1028,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "currentUnsoldAlgos",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1030,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "changePerMin",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1033,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "DAToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ERC20Token)2095"
      },
      {
        "astId": 1035,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "ERC20ContractAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1038,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "biddersAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1043,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "biddersList",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Bidder)1056_storage)"
      },
      {
        "astId": 1062,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "s_auctionState",
        "offset": 0,
        "slot": "11",
        "type": "t_enum(AuctionState)1059"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20Token)2095": {
        "encoding": "inplace",
        "label": "contract ERC20Token",
        "numberOfBytes": "20"
      },
      "t_enum(AuctionState)1059": {
        "encoding": "inplace",
        "label": "enum Dutch_Auction.AuctionState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Bidder)1056_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Dutch_Auction.Bidder)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidder)1056_storage"
      },
      "t_struct(Bidder)1056_storage": {
        "encoding": "inplace",
        "label": "struct Dutch_Auction.Bidder",
        "members": [
          {
            "astId": 1045,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "bidderID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1047,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "walletAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1049,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "bidValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1051,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "totalAlgosPurchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1053,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "refundEth",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1055,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "isExist",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}