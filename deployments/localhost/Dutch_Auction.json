{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAlgosAvailable",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__IsOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "addBidder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "biddersList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidderID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bidValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAlgosPurchased",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveAlgosRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "retrieveBidderAlgos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveContractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrievePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalAlgos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalBidder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retriveDATOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCurrentPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6270bb76aa8050ece8fc4702c8d32f93160f281489956052cddb4dcb3cb67c7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1374007",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd468b4d963c0293f51db1212fcefd4c2e51616030a13b40e5905c30a4a0fdd9d",
    "transactionHash": "0xe6270bb76aa8050ece8fc4702c8d32f93160f281489956052cddb4dcb3cb67c7",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1374007",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    50,
    200,
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "f8808606d63440594f006ac28ce3ddbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAlgosAvailable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Dutch_Auction__IsOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dutch_Auction__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"addBidder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"biddersList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidderID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAlgosPurchased\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveAlgosRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"retrieveBidderAlgos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrievePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalAlgos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalBidder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retriveDATOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCurrentPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dutch_Auction.sol\":\"Dutch_Auction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dutch_Auction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.21;\\n\\n// Using our own ERC20Token\\nimport \\\"./ERC20Token.sol\\\";\\n\\nerror Dutch_Auction__NotOwner();\\nerror Dutch_Auction__IsOwner();\\n\\ncontract Dutch_Auction {\\n    uint256 private currentPrice; //in wei\\n    uint256 private currentUnsoldAlgos;\\n    uint256 private totalNumBidders = 0;\\n    uint256 private startPrice; //in wei\\n\\n    /* Set in constructor, cannot be changed afterwards, only retrived */\\n    uint256 private immutable reservePrice;\\n    address private immutable i_owner;\\n    uint256 private immutable totalAlgosAvailable;\\n    uint256 private deployDate;\\n\\n    uint256 public startTime;\\n    uint256 public endTime;\\n\\n    ERC20Token private immutable DAToken; //importing Token\\n\\n    struct Bidder {\\n        uint256 bidderID;\\n        address walletAddress;\\n        uint256 bidValue; //the value they paid to the contract to purchase the algo\\n        uint256 totalAlgosPurchased; //this will change everytime somebody else bids\\n        bool isExist;\\n    }\\n\\n    /*mappings and arrays*/\\n    address[] biddersAddress;\\n    mapping(address => Bidder) public biddersList; //to be made private later <for debugging purposes>\\n\\n    /*Constructor*/\\n    constructor(\\n        uint256 _reservePrice,\\n        uint256 _startPrice,\\n        uint256 _totalAlgosAvailable,\\n        address _token\\n    ) {\\n        require(\\n            _reservePrice < _startPrice,\\n            \\\"reserve price is higher than current price\\\"\\n        );\\n        i_owner = msg.sender;\\n        reservePrice = _reservePrice;\\n        totalAlgosAvailable = _totalAlgosAvailable;\\n        currentUnsoldAlgos = _totalAlgosAvailable;\\n        currentPrice = _startPrice;\\n        startPrice = _startPrice;\\n        deployDate = block.timestamp;\\n        DAToken = ERC20Token(_token);\\n    }\\n\\n    /* modifiers */\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert Dutch_Auction__NotOwner();\\n        _; //do the rest of the function\\n    }\\n\\n    modifier notOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender == i_owner) revert Dutch_Auction__IsOwner();\\n        _; //do the rest of the function\\n    }\\n\\n    /* public functions */\\n\\n    //Reference: https://docs.soliditylang.org/en/latest/types.html#structs\\n    function addBidder() public payable notOwner {\\n        //call updatePrice function\\n        updateCurrentPrice();\\n        //checking all the requirements\\n        // require(_bidValue == msg.value, \\\"bidValue stated is not what was sent\\\");\\n        uint256 _bidValue = msg.value; // alternative way\\n        require(\\n            reservePrice < currentPrice,\\n            \\\"Lower or equal to reserve price! Ending Auction!\\\"\\n        );\\n        require(currentUnsoldAlgos > 0, \\\"All Algos Sold! Ending Auction! \\\");\\n        require(_bidValue >= currentPrice, \\\"bidValue lower than currentPrice\\\"); //bidValue has to be higher inorder to purchase\\n        require(\\n            _bidValue / currentPrice <= currentUnsoldAlgos,\\n            \\\"Not enough algos for you!\\\"\\n        );\\n\\n        // Adding or Updating the bidders currently in the contract\\n        if (!biddersList[msg.sender].isExist) {\\n            Bidder storage newBidder = biddersList[msg.sender]; //get the object\\n            //set the variables\\n            newBidder.bidderID = ++totalNumBidders;\\n            newBidder.walletAddress = msg.sender;\\n            newBidder.bidValue = _bidValue;\\n            newBidder.totalAlgosPurchased = _bidValue / currentPrice; //need to check the math\\n            newBidder.isExist = true;\\n            biddersAddress.push(msg.sender);\\n        } else {\\n            Bidder storage existingBidder = biddersList[msg.sender]; //get the object\\n            existingBidder.bidValue += _bidValue;\\n            existingBidder.totalAlgosPurchased += _bidValue / currentPrice;\\n        }\\n\\n        //Updating private variables in the contract\\n        currentUnsoldAlgos -= _bidValue / currentPrice;\\n\\n        updateAllBiders();\\n    }\\n\\n    /*Internal Functions */\\n    //TODO: make this internal later\\n    function updateCurrentPrice() public {\\n        //there is 60 seconds in one minute\\n        // 20 minutes auction\\n        // price drops by 10 wei every 2 minutes --> actual\\n        // price drops by 10 wei every 0.5 minutes --> testing purposes\\n        currentPrice =\\n            startPrice -\\n            (uint256((block.timestamp - deployDate)) / 30) *\\n            10;\\n    }\\n\\n    //TODO: can we use IPFS to save gas and make this better?\\n    function updateAllBiders() internal {\\n        //obtain current price again in case time elapsed\\n        updateCurrentPrice();\\n        currentUnsoldAlgos = totalAlgosAvailable;\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\n            biddersList[biddersAddress[i]].totalAlgosPurchased =\\n                biddersList[biddersAddress[i]].bidValue /\\n                currentPrice;\\n            currentUnsoldAlgos -=\\n                biddersList[biddersAddress[i]].bidValue /\\n                currentPrice;\\n        }\\n    }\\n\\n    /*\\n    triggered when either algos runs out or time runs out \\n    */\\n\\n    function sendTokens() public onlyOwner {\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\n            biddersList[biddersAddress[i]].totalAlgosPurchased =\\n                biddersList[biddersAddress[i]].bidValue /\\n                currentPrice;\\n            DAToken.transferFrom(\\n                i_owner,\\n                biddersAddress[i],\\n                biddersList[biddersAddress[i]].totalAlgosPurchased * 10 ** 18\\n            );\\n        }\\n    }\\n\\n    function contractAddress() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function retriveDATOKEN() public view returns (uint256) {\\n        return DAToken.allowance(i_owner, msg.sender);\\n    }\\n\\n    function endAuction() internal onlyOwner {}\\n\\n    // function burnRemainingTokens(\\n    //     uint256 currentUnsoldAlgos\\n    // ) internal onlyOwner {\\n    //     // to burn the remaining tokens that were left unsold after auction closes\\n    // }\\n\\n    /* View/pure Functions */\\n\\n    function retrievePrice() public view returns (uint256) {\\n        return currentPrice;\\n    }\\n\\n    function retrieveAlgosRemaining() public view returns (uint256) {\\n        return currentUnsoldAlgos;\\n    }\\n\\n    function retrieveTotalAlgos() public view returns (uint256) {\\n        return totalAlgosAvailable;\\n    }\\n\\n    function retrieveReservePrice() public view returns (uint256) {\\n        return reservePrice;\\n    }\\n\\n    function retrieveTotalBidder() public view returns (uint256) {\\n        return totalNumBidders;\\n    }\\n\\n    function retrieveContractOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function retrieveContractBalance() public view onlyOwner returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function retrieveBidderAlgos(address bidder) public view returns (uint256) {\\n        return biddersList[bidder].totalAlgosPurchased;\\n    }\\n}\\n\",\"keccak256\":\"0x55e5c5531a9e9655e1838e5d4cfa8366f91d125a7a953173cf92fa892a50f931\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract ERC20Token is Context, ERC20 {\\n    constructor(uint256 initialSupply) ERC20(\\\"ERC20Token\\\", \\\"ET\\\") {\\n        //To Note: there are 18 decimals by default\\n        // If initial supply is 50, we have to put in 50e18 or 50 * 10**18\\n        _mint(msg.sender, initialSupply * (10 ** uint256(decimals()))); //Allows us to create the intial amount of tokens\\n    }\\n}\\n\",\"keccak256\":\"0x68f7c3ab259c65abeff7fb6ac36c7e254cc7b3380b898e52544393feb03c7b08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405260006002553480156200001757600080fd5b506040516200197a3803806200197a83398181016040528101906200003d9190620001c5565b82841062000082576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200007990620002be565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505083608081815250508160c08181525050816001819055508260008190555082600381905550426004819055508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff168152505050505050620002e0565b600080fd5b6000819050919050565b6200013a8162000125565b81146200014657600080fd5b50565b6000815190506200015a816200012f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200018d8262000160565b9050919050565b6200019f8162000180565b8114620001ab57600080fd5b50565b600081519050620001bf8162000194565b92915050565b60008060008060808587031215620001e257620001e162000120565b5b6000620001f28782880162000149565b9450506020620002058782880162000149565b9350506040620002188782880162000149565b92505060606200022b87828801620001ae565b91505092959194509250565b600082825260208201905092915050565b7f7265736572766520707269636520697320686967686572207468616e2063757260008201527f72656e7420707269636500000000000000000000000000000000000000000000602082015250565b6000620002a6602a8362000237565b9150620002b38262000248565b604082019050919050565b60006020820190508181036000830152620002d98162000297565b9050919050565b60805160a05160c05160e051611628620003526000396000818161098f0152610c32015260008181610a520152610dea0152600081816103b1015281816108950152818161095d015281816109cb01528181610a8b0152610c6e01526000818161038b015261044601526116286000f3fe6080604052600436106100f35760003560e01c8063ac5ece6d1161008a578063e02539c811610059578063e02539c8146102ef578063e4655bca1461031a578063e47112bd14610345578063f6b4dfb41461035c576100f3565b8063ac5ece6d14610243578063b3ccc8eb1461026e578063c48109c914610299578063df385306146102c4576100f3565b80637494c875116100c65780637494c8751461019957806378e97925146101d65780637ded653f14610201578063aa9d9bd61461022c576100f3565b806314df33ac146100f85780631f8cdb04146101235780633197cbb61461012d5780636e3bc76b14610158575b600080fd5b34801561010457600080fd5b5061010d610387565b60405161011a9190611006565b60405180910390f35b61012b6103af565b005b34801561013957600080fd5b506101426107d6565b60405161014f9190611006565b60405180910390f35b34801561016457600080fd5b5061017f600480360381019061017a9190611084565b6107dc565b6040516101909594939291906110db565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb9190611084565b61083f565b6040516101cd9190611006565b60405180910390f35b3480156101e257600080fd5b506101eb61088b565b6040516101f89190611006565b60405180910390f35b34801561020d57600080fd5b50610216610891565b6040516102239190611006565b60405180910390f35b34801561023857600080fd5b5061024161091e565b005b34801561024f57600080fd5b50610258610959565b604051610265919061112e565b60405180910390f35b34801561027a57600080fd5b50610283610981565b6040516102909190611006565b60405180910390f35b3480156102a557600080fd5b506102ae61098b565b6040516102bb9190611006565b60405180910390f35b3480156102d057600080fd5b506102d9610a4e565b6040516102e69190611006565b60405180910390f35b3480156102fb57600080fd5b50610304610a76565b6040516103119190611006565b60405180910390f35b34801561032657600080fd5b5061032f610a7f565b60405161033c9190611006565b60405180910390f35b34801561035157600080fd5b5061035a610a89565b005b34801561036857600080fd5b50610371610dd8565b60405161037e919061112e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610434576040517fc3fdc7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61043c61091e565b60003490506000547f0000000000000000000000000000000000000000000000000000000000000000106104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049c906111cc565b60405180910390fd5b6000600154116104ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e190611238565b60405180910390fd5b60005481101561052f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610526906112a4565b60405180910390fd5b600154600054826105409190611322565b1115610581576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105789061139f565b60405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1661071d576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600260008154610627906113bf565b9190508190558160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508181600201819055506000548261068f9190611322565b816003018190555060018160040160006101000a81548160ff0219169083151502179055506007339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506107a5565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020160008282546107749190611407565b92505081905550600054826107899190611322565b81600301600082825461079c9190611407565b92505081905550505b600054816107b39190611322565b600160008282546107c4919061143b565b925050819055506107d3610de0565b50565b60065481565b60086020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905085565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60055481565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610918576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b600a601e60045442610930919061143b565b61093a9190611322565b610944919061146f565b600354610951919061143b565b600081905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e7f0000000000000000000000000000000000000000000000000000000000000000336040518363ffffffff1660e01b8152600401610a089291906114b1565b602060405180830381865afa158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190611506565b905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b6000600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0e576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600780549050811015610dd5576000546008600060078481548110610b3957610b38611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610bac9190611322565b6008600060078481548110610bc457610bc3611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000060078481548110610ca157610ca0611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006008600060078881548110610ced57610cec611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610d60919061146f565b6040518463ffffffff1660e01b8152600401610d7e93929190611562565b6020604051808303816000875af1158015610d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc191906115c5565b508080610dcd906113bf565b915050610b11565b50565b600030905090565b610de861091e565b7f000000000000000000000000000000000000000000000000000000000000000060018190555060005b600780549050811015610fea576000546008600060078481548110610e3a57610e39611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610ead9190611322565b6008600060078481548110610ec557610ec4611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506000546008600060078481548110610f4c57610f4b611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610fbf9190611322565b60016000828254610fd0919061143b565b925050819055508080610fe2906113bf565b915050610e12565b50565b6000819050919050565b61100081610fed565b82525050565b600060208201905061101b6000830184610ff7565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061105182611026565b9050919050565b61106181611046565b811461106c57600080fd5b50565b60008135905061107e81611058565b92915050565b60006020828403121561109a57611099611021565b5b60006110a88482850161106f565b91505092915050565b6110ba81611046565b82525050565b60008115159050919050565b6110d5816110c0565b82525050565b600060a0820190506110f06000830188610ff7565b6110fd60208301876110b1565b61110a6040830186610ff7565b6111176060830185610ff7565b61112460808301846110cc565b9695505050505050565b600060208201905061114360008301846110b1565b92915050565b600082825260208201905092915050565b7f4c6f776572206f7220657175616c20746f20726573657276652070726963652160008201527f20456e64696e672041756374696f6e2100000000000000000000000000000000602082015250565b60006111b6603083611149565b91506111c18261115a565b604082019050919050565b600060208201905081810360008301526111e5816111a9565b9050919050565b7f416c6c20416c676f7320536f6c642120456e64696e672041756374696f6e2120600082015250565b6000611222602083611149565b915061122d826111ec565b602082019050919050565b6000602082019050818103600083015261125181611215565b9050919050565b7f62696456616c7565206c6f776572207468616e2063757272656e745072696365600082015250565b600061128e602083611149565b915061129982611258565b602082019050919050565b600060208201905081810360008301526112bd81611281565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132d82610fed565b915061133883610fed565b925082611348576113476112c4565b5b828204905092915050565b7f4e6f7420656e6f75676820616c676f7320666f7220796f752100000000000000600082015250565b6000611389601983611149565b915061139482611353565b602082019050919050565b600060208201905081810360008301526113b88161137c565b9050919050565b60006113ca82610fed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113fc576113fb6112f3565b5b600182019050919050565b600061141282610fed565b915061141d83610fed565b9250828201905080821115611435576114346112f3565b5b92915050565b600061144682610fed565b915061145183610fed565b9250828203905081811115611469576114686112f3565b5b92915050565b600061147a82610fed565b915061148583610fed565b925082820261149381610fed565b915082820484148315176114aa576114a96112f3565b5b5092915050565b60006040820190506114c660008301856110b1565b6114d360208301846110b1565b9392505050565b6114e381610fed565b81146114ee57600080fd5b50565b600081519050611500816114da565b92915050565b60006020828403121561151c5761151b611021565b5b600061152a848285016114f1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060608201905061157760008301866110b1565b61158460208301856110b1565b6115916040830184610ff7565b949350505050565b6115a2816110c0565b81146115ad57600080fd5b50565b6000815190506115bf81611599565b92915050565b6000602082840312156115db576115da611021565b5b60006115e9848285016115b0565b9150509291505056fea264697066735822122044f7d6d4b9c0004fca95e1682c4d07c23d612e5223b88462dfac1601a2263f5364736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063ac5ece6d1161008a578063e02539c811610059578063e02539c8146102ef578063e4655bca1461031a578063e47112bd14610345578063f6b4dfb41461035c576100f3565b8063ac5ece6d14610243578063b3ccc8eb1461026e578063c48109c914610299578063df385306146102c4576100f3565b80637494c875116100c65780637494c8751461019957806378e97925146101d65780637ded653f14610201578063aa9d9bd61461022c576100f3565b806314df33ac146100f85780631f8cdb04146101235780633197cbb61461012d5780636e3bc76b14610158575b600080fd5b34801561010457600080fd5b5061010d610387565b60405161011a9190611006565b60405180910390f35b61012b6103af565b005b34801561013957600080fd5b506101426107d6565b60405161014f9190611006565b60405180910390f35b34801561016457600080fd5b5061017f600480360381019061017a9190611084565b6107dc565b6040516101909594939291906110db565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb9190611084565b61083f565b6040516101cd9190611006565b60405180910390f35b3480156101e257600080fd5b506101eb61088b565b6040516101f89190611006565b60405180910390f35b34801561020d57600080fd5b50610216610891565b6040516102239190611006565b60405180910390f35b34801561023857600080fd5b5061024161091e565b005b34801561024f57600080fd5b50610258610959565b604051610265919061112e565b60405180910390f35b34801561027a57600080fd5b50610283610981565b6040516102909190611006565b60405180910390f35b3480156102a557600080fd5b506102ae61098b565b6040516102bb9190611006565b60405180910390f35b3480156102d057600080fd5b506102d9610a4e565b6040516102e69190611006565b60405180910390f35b3480156102fb57600080fd5b50610304610a76565b6040516103119190611006565b60405180910390f35b34801561032657600080fd5b5061032f610a7f565b60405161033c9190611006565b60405180910390f35b34801561035157600080fd5b5061035a610a89565b005b34801561036857600080fd5b50610371610dd8565b60405161037e919061112e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610434576040517fc3fdc7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61043c61091e565b60003490506000547f0000000000000000000000000000000000000000000000000000000000000000106104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049c906111cc565b60405180910390fd5b6000600154116104ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e190611238565b60405180910390fd5b60005481101561052f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610526906112a4565b60405180910390fd5b600154600054826105409190611322565b1115610581576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105789061139f565b60405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1661071d576000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600260008154610627906113bf565b9190508190558160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508181600201819055506000548261068f9190611322565b816003018190555060018160040160006101000a81548160ff0219169083151502179055506007339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506107a5565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020160008282546107749190611407565b92505081905550600054826107899190611322565b81600301600082825461079c9190611407565b92505081905550505b600054816107b39190611322565b600160008282546107c4919061143b565b925050819055506107d3610de0565b50565b60065481565b60086020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905085565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60055481565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610918576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b600a601e60045442610930919061143b565b61093a9190611322565b610944919061146f565b600354610951919061143b565b600081905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e7f0000000000000000000000000000000000000000000000000000000000000000336040518363ffffffff1660e01b8152600401610a089291906114b1565b602060405180830381865afa158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190611506565b905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b6000600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0e576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600780549050811015610dd5576000546008600060078481548110610b3957610b38611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610bac9190611322565b6008600060078481548110610bc457610bc3611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000060078481548110610ca157610ca0611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006008600060078881548110610ced57610cec611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610d60919061146f565b6040518463ffffffff1660e01b8152600401610d7e93929190611562565b6020604051808303816000875af1158015610d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc191906115c5565b508080610dcd906113bf565b915050610b11565b50565b600030905090565b610de861091e565b7f000000000000000000000000000000000000000000000000000000000000000060018190555060005b600780549050811015610fea576000546008600060078481548110610e3a57610e39611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610ead9190611322565b6008600060078481548110610ec557610ec4611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506000546008600060078481548110610f4c57610f4b611533565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610fbf9190611322565b60016000828254610fd0919061143b565b925050819055508080610fe2906113bf565b915050610e12565b50565b6000819050919050565b61100081610fed565b82525050565b600060208201905061101b6000830184610ff7565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061105182611026565b9050919050565b61106181611046565b811461106c57600080fd5b50565b60008135905061107e81611058565b92915050565b60006020828403121561109a57611099611021565b5b60006110a88482850161106f565b91505092915050565b6110ba81611046565b82525050565b60008115159050919050565b6110d5816110c0565b82525050565b600060a0820190506110f06000830188610ff7565b6110fd60208301876110b1565b61110a6040830186610ff7565b6111176060830185610ff7565b61112460808301846110cc565b9695505050505050565b600060208201905061114360008301846110b1565b92915050565b600082825260208201905092915050565b7f4c6f776572206f7220657175616c20746f20726573657276652070726963652160008201527f20456e64696e672041756374696f6e2100000000000000000000000000000000602082015250565b60006111b6603083611149565b91506111c18261115a565b604082019050919050565b600060208201905081810360008301526111e5816111a9565b9050919050565b7f416c6c20416c676f7320536f6c642120456e64696e672041756374696f6e2120600082015250565b6000611222602083611149565b915061122d826111ec565b602082019050919050565b6000602082019050818103600083015261125181611215565b9050919050565b7f62696456616c7565206c6f776572207468616e2063757272656e745072696365600082015250565b600061128e602083611149565b915061129982611258565b602082019050919050565b600060208201905081810360008301526112bd81611281565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132d82610fed565b915061133883610fed565b925082611348576113476112c4565b5b828204905092915050565b7f4e6f7420656e6f75676820616c676f7320666f7220796f752100000000000000600082015250565b6000611389601983611149565b915061139482611353565b602082019050919050565b600060208201905081810360008301526113b88161137c565b9050919050565b60006113ca82610fed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113fc576113fb6112f3565b5b600182019050919050565b600061141282610fed565b915061141d83610fed565b9250828201905080821115611435576114346112f3565b5b92915050565b600061144682610fed565b915061145183610fed565b9250828203905081811115611469576114686112f3565b5b92915050565b600061147a82610fed565b915061148583610fed565b925082820261149381610fed565b915082820484148315176114aa576114a96112f3565b5b5092915050565b60006040820190506114c660008301856110b1565b6114d360208301846110b1565b9392505050565b6114e381610fed565b81146114ee57600080fd5b50565b600081519050611500816114da565b92915050565b60006020828403121561151c5761151b611021565b5b600061152a848285016114f1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060608201905061157760008301866110b1565b61158460208301856110b1565b6115916040830184610ff7565b949350505050565b6115a2816110c0565b81146115ad57600080fd5b50565b6000815190506115bf81611599565b92915050565b6000602082840312156115db576115da611021565b5b60006115e9848285016115b0565b9150509291505056fea264697066735822122044f7d6d4b9c0004fca95e1682c4d07c23d612e5223b88462dfac1601a2263f5364736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 720,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "currentPrice",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 722,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "currentUnsoldAlgos",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 725,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "totalNumBidders",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 727,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "startPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 735,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "deployDate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 737,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "startTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 739,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "endTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 756,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "biddersAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 761,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "biddersList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Bidder)753_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bidder)753_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Dutch_Auction.Bidder)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidder)753_storage"
      },
      "t_struct(Bidder)753_storage": {
        "encoding": "inplace",
        "label": "struct Dutch_Auction.Bidder",
        "members": [
          {
            "astId": 744,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "bidderID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 746,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "walletAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 748,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "bidValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 750,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "totalAlgosPurchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 752,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "isExist",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}