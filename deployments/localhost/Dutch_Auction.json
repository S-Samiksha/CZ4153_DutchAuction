{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAlgosAvailable",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__IsOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dutch_Auction__NotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionState",
          "type": "uint256"
        }
      ],
      "name": "Dutch_Auction__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "addBidder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "biddersList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bidderID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bidValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAlgosPurchased",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveAlgosRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "retrieveBidderAlgos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveContractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrievePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalAlgos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalBidder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCurrentPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdeae118e039f61ee5c5d6965bc4a8467c8c7d36250828405f0b229ef0ba60d55",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1757883",
    "logsBloom": "0x
    "blockHash": "0xd4016e5ec6853711ab640647a50bc2754333871087ba4e86525cab0d5f51fca9",
    "transactionHash": "0xdeae118e039f61ee5c5d6965bc4a8467c8c7d36250828405f0b229ef0ba60d55",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1757883",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    50,
    200,
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    30
  ],
  "numDeployments": 2,
  "solcInputHash": "5ff1818d2b2b9ab625e48a2121d75d95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAlgosAvailable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Dutch_Auction__IsOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dutch_Auction__NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionState\",\"type\":\"uint256\"}],\"name\":\"Dutch_Auction__UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"addBidder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"biddersList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidderID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAlgosPurchased\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveAlgosRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"retrieveBidderAlgos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrievePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalAlgos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalBidder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCurrentPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that ChainLink Keeper nodes call They look for the `upkeepneeded` to return true The following should be true in order to return true 1. Time interval should have passed (20minutes) 2. Subscription is funded with LINK 3. Auction should be in \\\"open\\\" state\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBidder()\":{\"notice\":\"public functions \"},\"checkUpkeep(bytes)\":{\"notice\":\"Sam Notes: Here is the variable equivalents : s_lastTimeStamp ====> startTime After the 20minutes is up, simply endAuction(); It will do the burn and send the tokens as well\"},\"retrievePrice()\":{\"notice\":\"View and Pure Function \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dutch_Auction.sol\":\"Dutch_Auction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Dutch_Auction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\n// Using our own ERC20Token\\r\\nimport \\\"./ERC20Token.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Dutch_Auction__NotOwner();\\r\\nerror Dutch_Auction__IsOwner();\\r\\nerror Dutch_Auction__NotOpen();\\r\\nerror Dutch_Auction__UpKeepNotNeeded(uint256 auctionState);\\r\\n\\r\\ncontract Dutch_Auction is AutomationCompatibleInterface {\\r\\n    uint256 private currentPrice; //in wei\\r\\n    uint256 private currentUnsoldAlgos;\\r\\n    uint256 private totalNumBidders = 0;\\r\\n    uint256 private startPrice; //in wei\\r\\n\\r\\n    /* Set in constructor, cannot be changed afterwards, only retrived */\\r\\n    uint256 private immutable reservePrice;\\r\\n    address private immutable i_owner;\\r\\n    uint256 private immutable totalAlgosAvailable;\\r\\n    uint256 private immutable startTime;\\r\\n    uint256 public endTime;\\r\\n\\r\\n    ERC20Token private immutable DAToken; //importing Token\\r\\n    address private immutable ERC20ContractAddress;\\r\\n\\r\\n    struct Bidder {\\r\\n        uint256 bidderID;\\r\\n        address walletAddress;\\r\\n        uint256 bidValue; //the value they paid to the contract to purchase the algo\\r\\n        uint256 totalAlgosPurchased; //this will change everytime somebody else bids\\r\\n        bool isExist;\\r\\n    }\\r\\n\\r\\n    /*mappings and arrays*/\\r\\n    address[] biddersAddress;\\r\\n    mapping(address => Bidder) public biddersList; //to be made private later <for debugging purposes>\\r\\n\\r\\n    // Variable to indicate auction's state --> type declaration\\r\\n    enum AuctionState {\\r\\n        OPEN,\\r\\n        CLOSING\\r\\n    } // uint256 0: OPEN, 1: CLOSED\\r\\n\\r\\n    AuctionState private s_auctionState;\\r\\n\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    /*Constructor*/\\r\\n    constructor(\\r\\n        uint256 _reservePrice,\\r\\n        uint256 _startPrice,\\r\\n        uint256 _totalAlgosAvailable,\\r\\n        address _token,\\r\\n        uint256 _interval\\r\\n    ) {\\r\\n        require(\\r\\n            _reservePrice < _startPrice,\\r\\n            \\\"reserve price is higher than current price\\\"\\r\\n        );\\r\\n        i_owner = msg.sender;\\r\\n        reservePrice = _reservePrice;\\r\\n        totalAlgosAvailable = _totalAlgosAvailable;\\r\\n        currentUnsoldAlgos = _totalAlgosAvailable;\\r\\n        currentPrice = _startPrice;\\r\\n        startPrice = _startPrice;\\r\\n        startTime = block.timestamp; //Start time of when the contract is deployed\\r\\n        DAToken = ERC20Token(_token);\\r\\n        ERC20ContractAddress = _token;\\r\\n        s_auctionState = AuctionState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        // i_interval = 20 * 60; //20minutes in seconds\\r\\n        i_interval = _interval;\\r\\n    }\\r\\n\\r\\n    /* modifiers */\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender != i_owner) revert Dutch_Auction__NotOwner();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    modifier notOwner() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender == i_owner) revert Dutch_Auction__IsOwner();\\r\\n        _; //do the rest of the function\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @dev This is the function that ChainLink Keeper nodes call\\r\\n     * They look for the `upkeepneeded` to return true\\r\\n     * The following should be true in order to return true\\r\\n     * 1. Time interval should have passed (20minutes)\\r\\n     * 2. Subscription is funded with LINK\\r\\n     * 3. Auction should be in \\\"open\\\" state\\r\\n     *\\r\\n     *\\r\\n     * @notice Sam Notes:\\r\\n     * Here is the variable equivalents :\\r\\n     * s_lastTimeStamp ====> startTime\\r\\n     * After the 20minutes is up, simply endAuction();\\r\\n     * It will do the burn and send the tokens as well\\r\\n     */\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /*checkData*/\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        bool isOpen = AuctionState.OPEN == s_auctionState;\\r\\n        // need to check (block.timestamp - last block timestamp) > interval\\r\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\r\\n        // if this is true, end auction and burn tokens\\r\\n        upkeepNeeded = (isOpen && timePassed); // if true, end auction\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        // want some validation such that only gets called when checkupkeep is true\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        // if ((block.timestamp - lastTimeStamp) > interval) {\\r\\n        //     lastTimeStamp = block.timestamp;\\r\\n        // }\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Dutch_Auction__UpKeepNotNeeded(uint256(s_auctionState));\\r\\n        }\\r\\n        s_auctionState = AuctionState.CLOSING;\\r\\n        // only owner can end auction\\r\\n\\r\\n        if (upkeepNeeded) {\\r\\n            // if never sell finish, burn all remaining algos\\r\\n            endAuction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /***\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     * -------------------------------------------------------------------------------------\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * public functions\\r\\n     *\\r\\n     * */\\r\\n\\r\\n    //Reference: https://docs.soliditylang.org/en/latest/types.html#structs\\r\\n    function addBidder() public payable notOwner {\\r\\n        //call updatePrice function\\r\\n        updateCurrentPrice();\\r\\n        //checking all the requirements\\r\\n        // require(_bidValue == msg.value, \\\"bidValue stated is not what was sent\\\");\\r\\n        uint256 _bidValue = msg.value; // alternative way\\r\\n        require(\\r\\n            reservePrice < currentPrice,\\r\\n            \\\"Lower or equal to reserve price! Ending Auction!\\\"\\r\\n        );\\r\\n        require(currentUnsoldAlgos > 0, \\\"All Algos Sold! Ending Auction! \\\");\\r\\n        // if (currentUnsoldAlgos == 0){\\r\\n        //     endAuction();\\r\\n        // }\\r\\n        require(_bidValue >= currentPrice, \\\"bidValue lower than currentPrice\\\"); //bidValue has to be higher inorder to purchase\\r\\n        require(\\r\\n            _bidValue / currentPrice <= currentUnsoldAlgos,\\r\\n            \\\"Not enough algos for you!\\\"\\r\\n        );\\r\\n        require(block.timestamp - startTime < 1200, \\\"time is up\\\");\\r\\n\\r\\n        // Adding or Updating the bidders currently in the contract\\r\\n        if (!biddersList[msg.sender].isExist) {\\r\\n            Bidder storage newBidder = biddersList[msg.sender]; //get the object\\r\\n            //set the variables\\r\\n            newBidder.bidderID = ++totalNumBidders;\\r\\n            newBidder.walletAddress = msg.sender;\\r\\n            newBidder.bidValue = _bidValue;\\r\\n            newBidder.totalAlgosPurchased = _bidValue / currentPrice; //need to check the math\\r\\n            newBidder.isExist = true;\\r\\n            biddersAddress.push(msg.sender);\\r\\n        } else {\\r\\n            Bidder storage existingBidder = biddersList[msg.sender]; //get the object\\r\\n            existingBidder.bidValue += _bidValue;\\r\\n            existingBidder.totalAlgosPurchased += _bidValue / currentPrice;\\r\\n        }\\r\\n\\r\\n        //Updating private variables in the contract\\r\\n        currentUnsoldAlgos -= _bidValue / currentPrice;\\r\\n\\r\\n        updateAllBiders();\\r\\n    }\\r\\n\\r\\n    /*Internal Functions */\\r\\n    //TODO: make this internal later\\r\\n    function updateCurrentPrice() public {\\r\\n        //there is 60 seconds in one minute\\r\\n        // 20 minutes auction\\r\\n        // price drops by 10 wei every 2 minutes --> actual\\r\\n        // price drops by 10 wei every 0.5 minutes --> testing purposes\\r\\n        currentPrice =\\r\\n            startPrice -\\r\\n            (uint256((block.timestamp - startTime)) / 30) *\\r\\n            10;\\r\\n    }\\r\\n\\r\\n    //TODO: can we use IPFS to save gas and make this better?\\r\\n    function updateAllBiders() internal {\\r\\n        //obtain current price again in case time elapsed\\r\\n        updateCurrentPrice();\\r\\n        currentUnsoldAlgos = totalAlgosAvailable;\\r\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\r\\n            biddersList[biddersAddress[i]].totalAlgosPurchased =\\r\\n                biddersList[biddersAddress[i]].bidValue /\\r\\n                currentPrice;\\r\\n            currentUnsoldAlgos -=\\r\\n                biddersList[biddersAddress[i]].bidValue /\\r\\n                currentPrice;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    triggered when either algos runs out or time runs out \\r\\n    */\\r\\n\\r\\n    function sendTokens() public onlyOwner {\\r\\n        for (uint i = 0; i < biddersAddress.length; i++) {\\r\\n            biddersList[biddersAddress[i]].totalAlgosPurchased =\\r\\n                biddersList[biddersAddress[i]].bidValue /\\r\\n                currentPrice;\\r\\n            DAToken.approve(\\r\\n                biddersAddress[i],\\r\\n                biddersList[biddersAddress[i]].totalAlgosPurchased * 10 ** 18\\r\\n            );\\r\\n            DAToken.transferFrom(\\r\\n                i_owner,\\r\\n                biddersAddress[i],\\r\\n                biddersList[biddersAddress[i]].totalAlgosPurchased * 10 ** 18\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function endAuction() public onlyOwner {\\r\\n        sendTokens();\\r\\n        DAToken.burn(i_owner, currentUnsoldAlgos);\\r\\n    }\\r\\n\\r\\n    /**View and Pure Function */\\r\\n\\r\\n    function retrievePrice() public view returns (uint256) {\\r\\n        return currentPrice;\\r\\n    }\\r\\n\\r\\n    function retrieveAlgosRemaining() public view returns (uint256) {\\r\\n        return currentUnsoldAlgos;\\r\\n    }\\r\\n\\r\\n    function retrieveTotalAlgos() public view returns (uint256) {\\r\\n        return totalAlgosAvailable;\\r\\n    }\\r\\n\\r\\n    function retrieveReservePrice() public view returns (uint256) {\\r\\n        return reservePrice;\\r\\n    }\\r\\n\\r\\n    function retrieveTotalBidder() public view returns (uint256) {\\r\\n        return totalNumBidders;\\r\\n    }\\r\\n\\r\\n    function retrieveContractOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function retrieveContractBalance() public view onlyOwner returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function retrieveBidderAlgos(address bidder) public view returns (uint256) {\\r\\n        return biddersList[bidder].totalAlgosPurchased;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2aaa61dea00a49cc9bf3a279be3be1abca1147fc6f5e8181663a586763561e6b\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract ERC20Token is Context, ERC20, Ownable{\\r\\n    constructor(uint256 initialSupply) ERC20(\\\"ERC20Token\\\", \\\"ET\\\") {\\r\\n        //To Note: there are 18 decimals by default\\r\\n        // If initial supply is 50, we have to put in 50e18 or 50 * 10**18\\r\\n        _mint(msg.sender, initialSupply * (10 ** 18)); //Allows us to create the intial amount of tokens\\r\\n    }\\r\\n\\r\\n    function burn(address owner, uint256 amount) public onlyOwner {\\r\\n        _burn(owner, amount * 10 ** 18);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x01139239c0b4aaf086c731fb6c00576a8ec9ffe804c0869ad8c33ecdf8f10c5a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260006002553480156200001757600080fd5b50604051620021503803806200215083398181016040528101906200003d91906200023b565b83851062000082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000079906200034a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505084608081815250508260c081815250508260018190555083600081905550836003819055504260e081815250508173ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250506000600760006101000a81548160ff021916908360018111156200017657620001756200036c565b5b02179055504260088190555080610140818152505050505050506200039b565b600080fd5b6000819050919050565b620001b0816200019b565b8114620001bc57600080fd5b50565b600081519050620001d081620001a5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020382620001d6565b9050919050565b6200021581620001f6565b81146200022157600080fd5b50565b60008151905062000235816200020a565b92915050565b600080600080600060a086880312156200025a576200025962000196565b5b60006200026a88828901620001bf565b95505060206200027d88828901620001bf565b94505060406200029088828901620001bf565b9350506060620002a38882890162000224565b9250506080620002b688828901620001bf565b9150509295509295909350565b600082825260208201905092915050565b7f7265736572766520707269636520697320686967686572207468616e2063757260008201527f72656e7420707269636500000000000000000000000000000000000000000000602082015250565b600062000332602a83620002c3565b91506200033f82620002d4565b604082019050919050565b60006020820190508181036000830152620003658162000323565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611d1062000440600039600061094a01526000505060008181610d3801528181610ea801526110dd0152600081816105830152610acf015260008181610b5801526111960152600081816103ae01528181610a4001528181610b2601528181610b9101528181610ee401528181611050015261111901526000818161038801526104430152611d106000f3fe6080604052600436106100f35760003560e01c8063aa9d9bd61161008a578063e02539c811610059578063e02539c814610300578063e4655bca1461032b578063e47112bd14610356578063fe67a54b1461036d576100f3565b8063aa9d9bd614610268578063ac5ece6d1461027f578063b3ccc8eb146102aa578063df385306146102d5576100f3565b80636e04ff0d116100c65780636e04ff0d146101815780636e3bc76b146101bf5780637494c875146102005780637ded653f1461023d576100f3565b806314df33ac146100f85780631f8cdb04146101235780633197cbb61461012d5780634585e33b14610158575b600080fd5b34801561010457600080fd5b5061010d610384565b60405161011a91906113b2565b60405180910390f35b61012b6103ac565b005b34801561013957600080fd5b50610142610842565b60405161014f91906113b2565b60405180910390f35b34801561016457600080fd5b5061017f600480360381019061017a9190611446565b610848565b005b34801561018d57600080fd5b506101a860048036038101906101a391906115d4565b610907565b6040516101b69291906116b7565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e19190611745565b61098d565b6040516101f7959493929190611781565b60405180910390f35b34801561020c57600080fd5b5061022760048036038101906102229190611745565b6109f0565b60405161023491906113b2565b60405180910390f35b34801561024957600080fd5b50610252610a3c565b60405161025f91906113b2565b60405180910390f35b34801561027457600080fd5b5061027d610ac9565b005b34801561028b57600080fd5b50610294610b22565b6040516102a191906117d4565b60405180910390f35b3480156102b657600080fd5b506102bf610b4a565b6040516102cc91906113b2565b60405180910390f35b3480156102e157600080fd5b506102ea610b54565b6040516102f791906113b2565b60405180910390f35b34801561030c57600080fd5b50610315610b7c565b60405161032291906113b2565b60405180910390f35b34801561033757600080fd5b50610340610b85565b60405161034d91906113b2565b60405180910390f35b34801561036257600080fd5b5061036b610b8f565b005b34801561037957600080fd5b5061038261104e565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610431576040517fc3fdc7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610439610ac9565b60003490506000547f0000000000000000000000000000000000000000000000000000000000000000106104a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049990611872565b60405180910390fd5b6000600154116104e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104de906118de565b60405180910390fd5b60005481101561052c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105239061194a565b60405180910390fd5b6001546000548261053d91906119c8565b111561057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611a45565b60405180910390fd5b6104b07f0000000000000000000000000000000000000000000000000000000000000000426105ad9190611a65565b106105ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e490611ae5565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16610789576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060026000815461069390611b05565b9190508190558160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160020181905550600054826106fb91906119c8565b816003018190555060018160040160006101000a81548160ff0219169083151502179055506005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610811565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020160008282546107e09190611b4d565b92505081905550600054826107f591906119c8565b8160030160008282546108089190611b4d565b92505081905550505b6000548161081f91906119c8565b600160008282546108309190611a65565b9250508190555061083f61118c565b50565b60045481565b600061086260405180602001604052806000815250610907565b509050806108c857600760009054906101000a900460ff16600181111561088c5761088b611b81565b5b6040517f8af44fe00000000000000000000000000000000000000000000000000000000081526004016108bf91906113b2565b60405180910390fd5b6001600760006101000a81548160ff021916908360018111156108ee576108ed611b81565b5b021790555080156109025761090161104e565b5b505050565b600060606000600760009054906101000a900460ff16600181111561092f5761092e611b81565b5b6000600181111561094357610942611b81565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600854426109779190611a65565b1190508180156109845750805b93505050915091565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905085565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac3576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b600a601e7f000000000000000000000000000000000000000000000000000000000000000042610af99190611a65565b610b0391906119c8565b610b0d9190611bb0565b600354610b1a9190611a65565b600081905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b6000600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c14576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60058054905081101561104b576000546006600060058481548110610c3f57610c3e611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610cb291906119c8565b6006600060058481548110610cca57610cc9611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b360058381548110610d8657610d85611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006006600060058781548110610dd257610dd1611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610e459190611bb0565b6040518363ffffffff1660e01b8152600401610e62929190611c21565b6020604051808303816000875af1158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190611c76565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000060058481548110610f1757610f16611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006006600060058881548110610f6357610f62611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610fd69190611bb0565b6040518463ffffffff1660e01b8152600401610ff493929190611ca3565b6020604051808303816000875af1158015611013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110379190611c76565b50808061104390611b05565b915050610c17565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d3576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110db610b8f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac7f00000000000000000000000000000000000000000000000000000000000000006001546040518363ffffffff1660e01b8152600401611158929190611c21565b600060405180830381600087803b15801561117257600080fd5b505af1158015611186573d6000803e3d6000fd5b50505050565b611194610ac9565b7f000000000000000000000000000000000000000000000000000000000000000060018190555060005b6005805490508110156113965760005460066000600584815481106111e6576111e5611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461125991906119c8565b600660006005848154811061127157611270611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060005460066000600584815481106112f8576112f7611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461136b91906119c8565b6001600082825461137c9190611a65565b92505081905550808061138e90611b05565b9150506111be565b50565b6000819050919050565b6113ac81611399565b82525050565b60006020820190506113c760008301846113a3565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611406576114056113e1565b5b8235905067ffffffffffffffff811115611423576114226113e6565b5b60208301915083600182028301111561143f5761143e6113eb565b5b9250929050565b6000806020838503121561145d5761145c6113d7565b5b600083013567ffffffffffffffff81111561147b5761147a6113dc565b5b611487858286016113f0565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114e182611498565b810181811067ffffffffffffffff82111715611500576114ff6114a9565b5b80604052505050565b60006115136113cd565b905061151f82826114d8565b919050565b600067ffffffffffffffff82111561153f5761153e6114a9565b5b61154882611498565b9050602081019050919050565b82818337600083830152505050565b600061157761157284611524565b611509565b90508281526020810184848401111561159357611592611493565b5b61159e848285611555565b509392505050565b600082601f8301126115bb576115ba6113e1565b5b81356115cb848260208601611564565b91505092915050565b6000602082840312156115ea576115e96113d7565b5b600082013567ffffffffffffffff811115611608576116076113dc565b5b611614848285016115a6565b91505092915050565b60008115159050919050565b6116328161161d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611672578082015181840152602081019050611657565b60008484015250505050565b600061168982611638565b6116938185611643565b93506116a3818560208601611654565b6116ac81611498565b840191505092915050565b60006040820190506116cc6000830185611629565b81810360208301526116de818461167e565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611712826116e7565b9050919050565b61172281611707565b811461172d57600080fd5b50565b60008135905061173f81611719565b92915050565b60006020828403121561175b5761175a6113d7565b5b600061176984828501611730565b91505092915050565b61177b81611707565b82525050565b600060a08201905061179660008301886113a3565b6117a36020830187611772565b6117b060408301866113a3565b6117bd60608301856113a3565b6117ca6080830184611629565b9695505050505050565b60006020820190506117e96000830184611772565b92915050565b600082825260208201905092915050565b7f4c6f776572206f7220657175616c20746f20726573657276652070726963652160008201527f20456e64696e672041756374696f6e2100000000000000000000000000000000602082015250565b600061185c6030836117ef565b915061186782611800565b604082019050919050565b6000602082019050818103600083015261188b8161184f565b9050919050565b7f416c6c20416c676f7320536f6c642120456e64696e672041756374696f6e2120600082015250565b60006118c86020836117ef565b91506118d382611892565b602082019050919050565b600060208201905081810360008301526118f7816118bb565b9050919050565b7f62696456616c7565206c6f776572207468616e2063757272656e745072696365600082015250565b60006119346020836117ef565b915061193f826118fe565b602082019050919050565b6000602082019050818103600083015261196381611927565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119d382611399565b91506119de83611399565b9250826119ee576119ed61196a565b5b828204905092915050565b7f4e6f7420656e6f75676820616c676f7320666f7220796f752100000000000000600082015250565b6000611a2f6019836117ef565b9150611a3a826119f9565b602082019050919050565b60006020820190508181036000830152611a5e81611a22565b9050919050565b6000611a7082611399565b9150611a7b83611399565b9250828203905081811115611a9357611a92611999565b5b92915050565b7f74696d6520697320757000000000000000000000000000000000000000000000600082015250565b6000611acf600a836117ef565b9150611ada82611a99565b602082019050919050565b60006020820190508181036000830152611afe81611ac2565b9050919050565b6000611b1082611399565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b4257611b41611999565b5b600182019050919050565b6000611b5882611399565b9150611b6383611399565b9250828201905080821115611b7b57611b7a611999565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000611bbb82611399565b9150611bc683611399565b9250828202611bd481611399565b91508282048414831517611beb57611bea611999565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050611c366000830185611772565b611c4360208301846113a3565b9392505050565b611c538161161d565b8114611c5e57600080fd5b50565b600081519050611c7081611c4a565b92915050565b600060208284031215611c8c57611c8b6113d7565b5b6000611c9a84828501611c61565b91505092915050565b6000606082019050611cb86000830186611772565b611cc56020830185611772565b611cd260408301846113a3565b94935050505056fea26469706673582212200871f0e1d97136503c0cebd5c292d13462a2387aceaa46c523d8d50d163dace664736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063aa9d9bd61161008a578063e02539c811610059578063e02539c814610300578063e4655bca1461032b578063e47112bd14610356578063fe67a54b1461036d576100f3565b8063aa9d9bd614610268578063ac5ece6d1461027f578063b3ccc8eb146102aa578063df385306146102d5576100f3565b80636e04ff0d116100c65780636e04ff0d146101815780636e3bc76b146101bf5780637494c875146102005780637ded653f1461023d576100f3565b806314df33ac146100f85780631f8cdb04146101235780633197cbb61461012d5780634585e33b14610158575b600080fd5b34801561010457600080fd5b5061010d610384565b60405161011a91906113b2565b60405180910390f35b61012b6103ac565b005b34801561013957600080fd5b50610142610842565b60405161014f91906113b2565b60405180910390f35b34801561016457600080fd5b5061017f600480360381019061017a9190611446565b610848565b005b34801561018d57600080fd5b506101a860048036038101906101a391906115d4565b610907565b6040516101b69291906116b7565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e19190611745565b61098d565b6040516101f7959493929190611781565b60405180910390f35b34801561020c57600080fd5b5061022760048036038101906102229190611745565b6109f0565b60405161023491906113b2565b60405180910390f35b34801561024957600080fd5b50610252610a3c565b60405161025f91906113b2565b60405180910390f35b34801561027457600080fd5b5061027d610ac9565b005b34801561028b57600080fd5b50610294610b22565b6040516102a191906117d4565b60405180910390f35b3480156102b657600080fd5b506102bf610b4a565b6040516102cc91906113b2565b60405180910390f35b3480156102e157600080fd5b506102ea610b54565b6040516102f791906113b2565b60405180910390f35b34801561030c57600080fd5b50610315610b7c565b60405161032291906113b2565b60405180910390f35b34801561033757600080fd5b50610340610b85565b60405161034d91906113b2565b60405180910390f35b34801561036257600080fd5b5061036b610b8f565b005b34801561037957600080fd5b5061038261104e565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610431576040517fc3fdc7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610439610ac9565b60003490506000547f0000000000000000000000000000000000000000000000000000000000000000106104a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049990611872565b60405180910390fd5b6000600154116104e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104de906118de565b60405180910390fd5b60005481101561052c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105239061194a565b60405180910390fd5b6001546000548261053d91906119c8565b111561057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611a45565b60405180910390fd5b6104b07f0000000000000000000000000000000000000000000000000000000000000000426105ad9190611a65565b106105ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e490611ae5565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16610789576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060026000815461069390611b05565b9190508190558160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160020181905550600054826106fb91906119c8565b816003018190555060018160040160006101000a81548160ff0219169083151502179055506005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610811565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020160008282546107e09190611b4d565b92505081905550600054826107f591906119c8565b8160030160008282546108089190611b4d565b92505081905550505b6000548161081f91906119c8565b600160008282546108309190611a65565b9250508190555061083f61118c565b50565b60045481565b600061086260405180602001604052806000815250610907565b509050806108c857600760009054906101000a900460ff16600181111561088c5761088b611b81565b5b6040517f8af44fe00000000000000000000000000000000000000000000000000000000081526004016108bf91906113b2565b60405180910390fd5b6001600760006101000a81548160ff021916908360018111156108ee576108ed611b81565b5b021790555080156109025761090161104e565b5b505050565b600060606000600760009054906101000a900460ff16600181111561092f5761092e611b81565b5b6000600181111561094357610942611b81565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600854426109779190611a65565b1190508180156109845750805b93505050915091565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905085565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac3576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47905090565b600a601e7f000000000000000000000000000000000000000000000000000000000000000042610af99190611a65565b610b0391906119c8565b610b0d9190611bb0565b600354610b1a9190611a65565b600081905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b6000600254905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c14576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60058054905081101561104b576000546006600060058481548110610c3f57610c3e611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610cb291906119c8565b6006600060058481548110610cca57610cc9611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b360058381548110610d8657610d85611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006006600060058781548110610dd257610dd1611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610e459190611bb0565b6040518363ffffffff1660e01b8152600401610e62929190611c21565b6020604051808303816000875af1158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190611c76565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd7f000000000000000000000000000000000000000000000000000000000000000060058481548110610f1757610f16611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400006006600060058881548110610f6357610f62611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154610fd69190611bb0565b6040518463ffffffff1660e01b8152600401610ff493929190611ca3565b6020604051808303816000875af1158015611013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110379190611c76565b50808061104390611b05565b915050610c17565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d3576040517fae4a21bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110db610b8f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac7f00000000000000000000000000000000000000000000000000000000000000006001546040518363ffffffff1660e01b8152600401611158929190611c21565b600060405180830381600087803b15801561117257600080fd5b505af1158015611186573d6000803e3d6000fd5b50505050565b611194610ac9565b7f000000000000000000000000000000000000000000000000000000000000000060018190555060005b6005805490508110156113965760005460066000600584815481106111e6576111e5611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461125991906119c8565b600660006005848154811061127157611270611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060005460066000600584815481106112f8576112f7611bf2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015461136b91906119c8565b6001600082825461137c9190611a65565b92505081905550808061138e90611b05565b9150506111be565b50565b6000819050919050565b6113ac81611399565b82525050565b60006020820190506113c760008301846113a3565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611406576114056113e1565b5b8235905067ffffffffffffffff811115611423576114226113e6565b5b60208301915083600182028301111561143f5761143e6113eb565b5b9250929050565b6000806020838503121561145d5761145c6113d7565b5b600083013567ffffffffffffffff81111561147b5761147a6113dc565b5b611487858286016113f0565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114e182611498565b810181811067ffffffffffffffff82111715611500576114ff6114a9565b5b80604052505050565b60006115136113cd565b905061151f82826114d8565b919050565b600067ffffffffffffffff82111561153f5761153e6114a9565b5b61154882611498565b9050602081019050919050565b82818337600083830152505050565b600061157761157284611524565b611509565b90508281526020810184848401111561159357611592611493565b5b61159e848285611555565b509392505050565b600082601f8301126115bb576115ba6113e1565b5b81356115cb848260208601611564565b91505092915050565b6000602082840312156115ea576115e96113d7565b5b600082013567ffffffffffffffff811115611608576116076113dc565b5b611614848285016115a6565b91505092915050565b60008115159050919050565b6116328161161d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611672578082015181840152602081019050611657565b60008484015250505050565b600061168982611638565b6116938185611643565b93506116a3818560208601611654565b6116ac81611498565b840191505092915050565b60006040820190506116cc6000830185611629565b81810360208301526116de818461167e565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611712826116e7565b9050919050565b61172281611707565b811461172d57600080fd5b50565b60008135905061173f81611719565b92915050565b60006020828403121561175b5761175a6113d7565b5b600061176984828501611730565b91505092915050565b61177b81611707565b82525050565b600060a08201905061179660008301886113a3565b6117a36020830187611772565b6117b060408301866113a3565b6117bd60608301856113a3565b6117ca6080830184611629565b9695505050505050565b60006020820190506117e96000830184611772565b92915050565b600082825260208201905092915050565b7f4c6f776572206f7220657175616c20746f20726573657276652070726963652160008201527f20456e64696e672041756374696f6e2100000000000000000000000000000000602082015250565b600061185c6030836117ef565b915061186782611800565b604082019050919050565b6000602082019050818103600083015261188b8161184f565b9050919050565b7f416c6c20416c676f7320536f6c642120456e64696e672041756374696f6e2120600082015250565b60006118c86020836117ef565b91506118d382611892565b602082019050919050565b600060208201905081810360008301526118f7816118bb565b9050919050565b7f62696456616c7565206c6f776572207468616e2063757272656e745072696365600082015250565b60006119346020836117ef565b915061193f826118fe565b602082019050919050565b6000602082019050818103600083015261196381611927565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119d382611399565b91506119de83611399565b9250826119ee576119ed61196a565b5b828204905092915050565b7f4e6f7420656e6f75676820616c676f7320666f7220796f752100000000000000600082015250565b6000611a2f6019836117ef565b9150611a3a826119f9565b602082019050919050565b60006020820190508181036000830152611a5e81611a22565b9050919050565b6000611a7082611399565b9150611a7b83611399565b9250828203905081811115611a9357611a92611999565b5b92915050565b7f74696d6520697320757000000000000000000000000000000000000000000000600082015250565b6000611acf600a836117ef565b9150611ada82611a99565b602082019050919050565b60006020820190508181036000830152611afe81611ac2565b9050919050565b6000611b1082611399565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b4257611b41611999565b5b600182019050919050565b6000611b5882611399565b9150611b6383611399565b9250828201905080821115611b7b57611b7a611999565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000611bbb82611399565b9150611bc683611399565b9250828202611bd481611399565b91508282048414831517611beb57611bea611999565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050611c366000830185611772565b611c4360208301846113a3565b9392505050565b611c538161161d565b8114611c5e57600080fd5b50565b600081519050611c7081611c4a565b92915050565b600060208284031215611c8c57611c8b6113d7565b5b6000611c9a84828501611c61565b91505092915050565b6000606082019050611cb86000830186611772565b611cc56020830185611772565b611cd260408301846113a3565b94935050505056fea26469706673582212200871f0e1d97136503c0cebd5c292d13462a2387aceaa46c523d8d50d163dace664736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that ChainLink Keeper nodes call They look for the `upkeepneeded` to return true The following should be true in order to return true 1. Time interval should have passed (20minutes) 2. Subscription is funded with LINK 3. Auction should be in \"open\" state"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBidder()": {
        "notice": "public functions "
      },
      "checkUpkeep(bytes)": {
        "notice": "Sam Notes: Here is the variable equivalents : s_lastTimeStamp ====> startTime After the 20minutes is up, simply endAuction(); It will do the burn and send the tokens as well"
      },
      "retrievePrice()": {
        "notice": "View and Pure Function "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 861,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "currentPrice",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 863,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "currentUnsoldAlgos",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 866,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "totalNumBidders",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 868,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "startPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 878,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "endTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 897,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "biddersAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 902,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "biddersList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Bidder)894_storage)"
      },
      {
        "astId": 908,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "s_auctionState",
        "offset": 0,
        "slot": "7",
        "type": "t_enum(AuctionState)905"
      },
      {
        "astId": 910,
        "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AuctionState)905": {
        "encoding": "inplace",
        "label": "enum Dutch_Auction.AuctionState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bidder)894_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Dutch_Auction.Bidder)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidder)894_storage"
      },
      "t_struct(Bidder)894_storage": {
        "encoding": "inplace",
        "label": "struct Dutch_Auction.Bidder",
        "members": [
          {
            "astId": 885,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "bidderID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 887,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "walletAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 889,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "bidValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 891,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "totalAlgosPurchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "contracts/Dutch_Auction.sol:Dutch_Auction",
            "label": "isExist",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}